---
alwaysApply: true
---
# Cursor Memory-Bank Integration Protocol

## Project Repository Integration

This project uses [`cursor-memory-bank`](https://github.com/vanzan01/cursor-memory-bank) for persistent context management and autonomous mode switching.

### Required File Structure
```
project-root/
├── custom_modes/
│   ├── VAN.md                    # Project initialization mode
│   ├── PLAN.md                   # Detailed planning mode
│   ├── CREATIVE.md               # Design exploration mode
│   ├── IMPLEMENT.md              # Systematic implementation mode
│   ├── REFLECT.md                # Review and documentation mode
│   ├── ARCHIVE.md                # Comprehensive documentation mode
│   ├── QA.md                     # Quality assurance mode
│   ├── OPTIMIZE.md               # Performance optimization mode
│   ├── DEBUG.md                  # Issue investigation mode
│   └── INTEGRATE.md              # Cross-component integration mode
└── memory-bank/
    ├── activeContext.md          # Current mode and focus
    ├── tasks.md                  # Task tracking and status
    ├── progress.md               # Implementation milestones
    ├── file-structure.md         # Project file organization
    ├── architecture-decisions.md # Design rationale
    ├── angular-patterns.md       # Established code patterns
    ├── continuation-state.md     # For seamless resumption
    ├── performance-metrics.md    # Performance tracking
    ├── security-checklist.md    # Security validation status
    ├── dependency-graph.md       # Component relationships
    └── modes/
        ├── creative-*.md        # Design exploration records
        ├── reflect-*.md         # Retrospective insights
        ├── implement-*.md       # Implementation logs
        ├── plan-*.md           # Planning documents
        ├── optimize-*.md       # Performance improvement records
        ├── debug-*.md          # Issue resolution logs
        └── integrate-*.md      # Integration testing records
```

## Automatic Mode Switching Protocol

### Enhanced Mode Detection Triggers

```javascript
const MODE_TRIGGERS = {
  VAN: () => !fileExists('memory-bank/activeContext.md') || projectEmpty(),
  PLAN: () => currentMode('VAN') && tasksIdentified() && !detailedPlanExists(),
  CREATIVE: () => complexDesignRequired() || userExplorationRequest() || architecturalDecisionNeeded(),
  IMPLEMENT: () => currentMode('PLAN') && planApproved() && !implementationStarted(),
  QA: () => codeChanges() || qualityIssuesDetected() || implementationComplete(),
  OPTIMIZE: () => performanceIssuesDetected() || optimizationOpportunityIdentified(),
  DEBUG: () => errorsDetected() || bugReportsReceived() || testFailures(),
  INTEGRATE: () => componentsReadyForIntegration() || crossComponentTestingNeeded(),
  REFLECT: () => implementationComplete() || majorMilestoneReached() || learningOpportunityIdentified(),
  ARCHIVE: () => currentMode('REFLECT') && documentationNeeded() || projectPhaseComplete()
};

// Enhanced auto-switch logic with priority handling
function autoSwitchMode() {
  const triggeredModes = [];

  for (const [mode, trigger] of Object.entries(MODE_TRIGGERS)) {
    if (trigger()) {
      triggeredModes.push({
        mode,
        priority: getModePriority(mode),
        urgency: getModeUrgency(mode)
      });
    }
  }

  if (triggeredModes.length > 0) {
    // Sort by priority and urgency
    const nextMode = triggeredModes.sort((a, b) => {
      if (a.urgency !== b.urgency) return b.urgency - a.urgency;
      return b.priority - a.priority;
    })[0];

    switchToMode(nextMode.mode);
    updateActiveContext(nextMode.mode);
    logModeTransition(nextMode.mode, triggeredModes);
  }
}

function getModePriority(mode) {
  const priorities = {
    'DEBUG': 10,      // Critical issues first
    'QA': 9,          # Quality gates
    'IMPLEMENT': 8,   # Core development
    'OPTIMIZE': 7,    # Performance improvements
    'INTEGRATE': 6,   # System integration
    'PLAN': 5,        # Planning and design
    'CREATIVE': 4,    # Exploration and design
    'REFLECT': 3,     # Learning and retrospection
    'ARCHIVE': 2,     # Documentation
    'VAN': 1          # Initialization
  };
  return priorities[mode] || 0;
}

function getModeUrgency(mode) {
  // Check for urgent conditions that require immediate attention
  const urgencyFactors = {
    'DEBUG': () => criticalErrorsDetected() ? 10 : (errorsDetected() ? 7 : 0),
    'QA': () => buildFailures() ? 9 : (testFailures() ? 6 : 0),
    'IMPLEMENT': () => blockedTasks() ? 8 : (readyTasks() ? 5 : 0),
    'OPTIMIZE': () => performanceCritical() ? 7 : (performanceIssues() ? 4 : 0),
    'INTEGRATE': () => integrationBlocking() ? 8 : (integrationReady() ? 5 : 0),
    'PLAN': () => planningBlocking() ? 6 : (planningNeeded() ? 3 : 0),
    'CREATIVE': () => designBlocking() ? 5 : (designNeeded() ? 2 : 0),
    'REFLECT': () => learningCritical() ? 3 : (learningOpportunity() ? 1 : 0),
    'ARCHIVE': () => documentationUrgent() ? 2 : 0,
    'VAN': () => projectEmpty() ? 10 : 0
  };

  return urgencyFactors[mode] ? urgencyFactors[mode]() : 0;
}
```

### Mode Switch Implementation

When switching modes, automatically:

1. **Update `memory-bank/activeContext.md`**:
```markdown
# Active Context

**Current Mode**: IMPLEMENT
**Focus**: Angular v20 Dashboard Component
**Started**: 2024-01-15 14:30
**Last Updated**: 2024-01-15 16:45
**Priority**: HIGH
**Urgency**: MEDIUM

## Current Task
Building responsive dashboard with Material Design components

## Mode History
- VAN (2024-01-15 13:00-13:30) - Project initialized
- PLAN (2024-01-15 13:30-14:30) - Implementation plan created
- IMPLEMENT (2024-01-15 14:30-present) - Active development

## Next Actions
- [ ] Complete data service integration
- [ ] Add chart visualization
- [ ] Implement real-time updates

## Context Notes
Using standalone components with signals pattern
Performance target: <200ms initial load

## Dependencies
- Material Design components configured
- Firebase connection established
- Chart.js library integrated

## Risks
- API rate limiting concerns
- Chart performance with large datasets
```

2. **Create/Update Mode-Specific Files**:
```markdown
# Implementation Log - Dashboard Component

**Mode**: IMPLEMENT
**Component**: DashboardComponent
**Started**: 2024-01-15 16:45
**Priority**: HIGH
**Estimated Completion**: 2024-01-15 18:00

## Implementation Progress
- [x] Component structure created
- [x] Material imports configured
- [x] Signal-based state setup
- [ ] Data service integration (IN PROGRESS)
- [ ] Chart component setup
- [ ] Error handling implementation
- [ ] Loading states management
- [ ] Responsive design implementation

## Code Patterns Used
- Standalone component architecture
- Signal-based state management
- OnPush change detection
- Reactive forms with validation
- Error boundary implementation

## Performance Considerations
- Lazy loading for chart components
- Virtual scrolling for large datasets
- Memoization for computed values
- OnPush optimization applied

## Quality Gates
- [ ] Unit tests written
- [ ] Integration tests passing
- [ ] Accessibility compliance
- [ ] Performance benchmarks met
- [ ] Code review completed

## Technical Debt
- TODO: Optimize chart rendering algorithm
- TODO: Implement caching layer for API calls
- TODO: Add comprehensive error logging
```

## Enhanced Proactive Update System

### Advanced File Change Triggers

```javascript
const UPDATE_TRIGGERS = {
  'src/**/*.ts': () => {
    updateFileStructure();
    updateAngularPatterns();
    analyzePerformanceImpact();
    checkSecurityImplications();
  },
  'src/app/components/**': () => {
    updateComponentRegistry();
    analyzeDependencyGraph();
    checkAccessibilityCompliance();
  },
  'src/app/services/**': () => {
    updateServiceDependencies();
    analyzeServicePerformance();
    checkServiceSecurity();
  },
  'src/app/models/**': () => {
    updateDataModels();
    checkTypeDefinitions();
    validateSchemaChanges();
  },
  'angular.json': () => {
    updateProjectConfiguration();
    checkBuildOptimizations();
    validateWorkspaceSettings();
  },
  'package.json': () => {
    updateDependencyTracking();
    checkSecurityVulnerabilities();
    analyzeBundleSize();
  },
  'src/assets/**': () => {
    updateAssetInventory();
    optimizeAssetDelivery();
    checkAssetSecurity();
  },
  '*.spec.ts': () => {
    updateTestCoverage();
    analyzeTestQuality();
    updateQAMetrics();
  }
};

// Enhanced change detection with impact analysis
function watchAndUpdate() {
  Object.entries(UPDATE_TRIGGERS).forEach(([pattern, handler]) => {
    onFileChange(pattern, (changedFiles) => {
      const impact = analyzeChangeImpact(changedFiles);
      handler(changedFiles, impact);

      // Trigger mode switches based on change impact
      if (impact.requiresQA) triggerMode('QA');
      if (impact.performanceImpact) triggerMode('OPTIMIZE');
      if (impact.integrationImpact) triggerMode('INTEGRATE');
      if (impact.breakingChange) triggerMode('DEBUG');

      syncMemoryBank();
      logUpdate(`Auto-updated memory-bank due to ${pattern} changes`, impact);
    });
  });
}

function analyzeChangeImpact(changedFiles) {
  return {
    requiresQA: changedFiles.some(f => f.includes('component') || f.includes('service')),
    performanceImpact: changedFiles.some(f => f.includes('service') || f.includes('pipe')),
    integrationImpact: changedFiles.some(f => f.includes('interface') || f.includes('model')),
    breakingChange: changedFiles.some(f => detectBreakingChange(f)),
    securityImpact: changedFiles.some(f => f.includes('auth') || f.includes('security')),
    accessibilityImpact: changedFiles.some(f => f.includes('component') && hasTemplateChanges(f))
  };
}
```

### Advanced Synchronization Functions

```javascript
function updateFileStructure() {
  const structure = generateProjectTree();
  const metrics = calculateProjectMetrics();
  const dependencies = analyzeDependencies();

  writeFile('memory-bank/file-structure.md', `
# Project File Structure

Last Updated: ${new Date().toISOString()}

## Project Metrics
- Total Files: ${metrics.totalFiles}
- Components: ${metrics.components}
- Services: ${metrics.services}
- Models: ${metrics.models}
- Tests: ${metrics.tests}
- Code Coverage: ${metrics.coverage}%

## File Tree
\`\`\`
${structure}
\`\`\`

## Recent Changes
${getRecentFileChanges()}

## Component Registry
${listAngularComponents()}

## Service Dependencies
${mapServiceDependencies()}

## Performance Hotspots
${identifyPerformanceHotspots()}

## Technical Debt
${calculateTechnicalDebt()}
  `);
}

function updateAngularPatterns() {
  const patterns = analyzeCodePatterns();
  const bestPractices = validateBestPractices();
  const antiPatterns = detectAntiPatterns();

  appendToFile('memory-bank/angular-patterns.md', `
## Pattern Update - ${new Date().toLocaleString()}

### New Patterns Identified
${patterns.newPatterns.map(p => `- **${p.name}**: ${p.description}\n  - Usage: ${p.usage}\n  - Benefits: ${p.benefits}`).join('\n')}

### Best Practices Compliance
${bestPractices.map(bp => `- ✅ ${bp.rule}: ${bp.status}`).join('\n')}

### Anti-Patterns Detected
${antiPatterns.map(ap => `- ⚠️ ${ap.pattern}: ${ap.location}\n  - Risk: ${ap.risk}\n  - Recommendation: ${ap.fix}`).join('\n')}

### Usage Examples
${patterns.examples}

### Performance Impact
${patterns.performanceMetrics}
  `);
}

function updatePerformanceMetrics() {
  const metrics = collectPerformanceMetrics();

  writeFile('memory-bank/performance-metrics.md', `
# Performance Metrics

Last Updated: ${new Date().toISOString()}

## Bundle Analysis
- Main Bundle: ${metrics.bundles.main}KB
- Vendor Bundle: ${metrics.bundles.vendor}KB
- Lazy Loaded: ${metrics.bundles.lazy}KB
- Total Size: ${metrics.bundles.total}KB

## Runtime Performance
- First Contentful Paint: ${metrics.fcp}ms
- Largest Contentful Paint: ${metrics.lcp}ms
- Time to Interactive: ${metrics.tti}ms
- Cumulative Layout Shift: ${metrics.cls}

## Memory Usage
- Heap Size: ${metrics.memory.heap}MB
- Used Heap: ${metrics.memory.used}MB
- Memory Leaks: ${metrics.memory.leaks.length} detected

## Change Detection
- CD Cycles: ${metrics.changeDetection.cycles}/second
- CD Time: ${metrics.changeDetection.avgTime}ms
- OnPush Components: ${metrics.changeDetection.onPushRatio}%

## Recommendations
${generatePerformanceRecommendations(metrics)}
  `);
}

function updateSecurityChecklist() {
  const securityAnalysis = performSecurityAnalysis();

  writeFile('memory-bank/security-checklist.md', `
# Security Checklist

Last Updated: ${new Date().toISOString()}

## Security Posture: ${securityAnalysis.overallScore}/100

### Authentication & Authorization
- [${securityAnalysis.auth.implemented ? 'x' : ' '}] Authentication implemented
- [${securityAnalysis.auth.jwtSecure ? 'x' : ' '}] JWT tokens properly secured
- [${securityAnalysis.auth.roleBasedAccess ? 'x' : ' '}] Role-based access control
- [${securityAnalysis.auth.sessionManagement ? 'x' : ' '}] Session management

### Input Validation & Sanitization
- [${securityAnalysis.validation.inputValidation ? 'x' : ' '}] Input validation implemented
- [${securityAnalysis.validation.xssProtection ? 'x' : ' '}] XSS protection enabled
- [${securityAnalysis.validation.sqlInjection ? 'x' : ' '}] SQL injection prevention
- [${securityAnalysis.validation.sanitization ? 'x' : ' '}] Data sanitization

### Security Headers
- [${securityAnalysis.headers.csp ? 'x' : ' '}] Content Security Policy
- [${securityAnalysis.headers.hsts ? 'x' : ' '}] HTTP Strict Transport Security
- [${securityAnalysis.headers.xframe ? 'x' : ' '}] X-Frame-Options
- [${securityAnalysis.headers.xcontent ? 'x' : ' '}] X-Content-Type-Options

### Dependencies
- Vulnerable Dependencies: ${securityAnalysis.dependencies.vulnerabilities}
- Security Patches: ${securityAnalysis.dependencies.patches} pending
- Last Audit: ${securityAnalysis.dependencies.lastAudit}

### Critical Issues
${securityAnalysis.criticalIssues.map(issue => `- ⚠️ ${issue.severity}: ${issue.description}`).join('\n')}

### Recommendations
${securityAnalysis.recommendations.map(rec => `- ${rec.priority}: ${rec.action}`).join('\n')}
  `);
}
```

## Advanced Context Synchronization Strategy

### Real-Time Sync Points with Intelligence

**Every code generation cycle:**
1. Analyze change impact and complexity
2. Update continuation-state.md with intelligent context compression
3. Sync file-structure.md with dependency impact analysis
4. Log progress with quality metrics in tasks.md
5. Trigger appropriate quality gates based on change type

**Before token limit reached:**
1. Compress current context using semantic compression
2. Preserve critical variables, states, and architectural decisions
3. Mark logical breakpoint with continuation hints in progress.md
4. Prepare intelligent resumption prompt with context reconstruction
5. Cache intermediate results for faster resumption

**On mode transitions:**
1. Validate mode prerequisites and readiness
2. Archive current mode state with lessons learned
3. Initialize new mode with relevant context
4. Update cross-mode dependencies and triggers
5. Sync all stakeholder modes about the transition

### Intelligent Memory-Bank File Templates

**Enhanced activeContext.md Template:**
```markdown
# Active Context

**Current Mode**: {{MODE}}
**Focus**: {{CURRENT_TASK}}
**Started**: {{START_TIME}}
**Last Updated**: {{UPDATE_TIME}}
**Priority**: {{PRIORITY_LEVEL}}
**Urgency**: {{URGENCY_LEVEL}}
**Estimated Completion**: {{ETA}}

## Current Task
{{TASK_DESCRIPTION}}

## Progress Status
{{PROGRESS_INDICATORS}}
- Overall Progress: {{PROGRESS_PERCENTAGE}}%
- Quality Score: {{QUALITY_SCORE}}/100
- Performance Score: {{PERFORMANCE_SCORE}}/100
- Security Score: {{SECURITY_SCORE}}/100

## Next Actions
{{ACTION_ITEMS}}

## Context Notes
{{IMPORTANT_CONTEXT}}

## Dependencies
{{DEPENDENCY_LIST}}

## Risks & Mitigation
{{RISK_ASSESSMENT}}

## Quality Gates
{{QUALITY_CHECKPOINTS}}

## Performance Targets
{{PERFORMANCE_BENCHMARKS}}

## Mode Transition Triggers
{{TRANSITION_CONDITIONS}}
```

**Enhanced continuation-state.md Template:**
```markdown
# Continuation State

**Timestamp**: {{TIMESTAMP}}
**Mode**: {{CURRENT_MODE}}
**Token Usage**: {{TOKEN_COUNT}}/{{TOKEN_LIMIT}}
**Context Compression Ratio**: {{COMPRESSION_RATIO}}%

## Current Implementation
**File**: {{CURRENT_FILE}}
**Function**: {{CURRENT_FUNCTION}}
**Line**: {{CURRENT_LINE}}
**Completion Status**: {{COMPLETION_PERCENTAGE}}%

## Preserved State
\`\`\`typescript
// Variable states
{{VARIABLE_STATES}}

// Active patterns
{{ACTIVE_PATTERNS}}

// Architecture decisions
{{ARCHITECTURE_CONTEXT}}
\`\`\`

## Semantic Context
**Design Intent**: {{DESIGN_INTENT}}
**Implementation Strategy**: {{IMPLEMENTATION_STRATEGY}}
**Quality Considerations**: {{QUALITY_FOCUS}}

## Next Action
**Immediate Step**: {{IMMEDIATE_NEXT_STEP}}
**Expected Outcome**: {{EXPECTED_RESULT}}
**Success Criteria**: {{SUCCESS_METRICS}}

## Context Reconstruction Hints
{{CONTEXT_RECONSTRUCTION_GUIDE}}

## Compressed Context
{{INTELLIGENTLY_COMPRESSED_CONTEXT}}

## Continuation Validation
- [ ] All critical state preserved
- [ ] Architecture decisions maintained
- [ ] Quality standards upheld
- [ ] Performance targets on track
```

## Autonomous Update Execution with Intelligence

### Smart High-Confidence Auto-Updates

Execute immediately with intelligent validation:

```javascript
const AUTO_UPDATE_CONFIDENCE_RULES = {
  'file-structure': {
    trigger: () => angularCliOperationDetected() || newFileCreated(),
    validation: (content) => validateProjectStructure(content) && noCriticalPathsAffected(),
    confidence: 0.95
  },
  'progress-tracking': {
    trigger: () => codeCompletionDetected() || testsPassed(),
    validation: (content) => validateProgressMetrics(content) && qualityGatesMet(),
    confidence: 0.90
  },
  'mode-transitions': {
    trigger: () => clearCompletionCriteria() || criticalIssueDetected(),
    validation: (content) => validateModeReadiness(content) && prerequisitesMet(),
    confidence: 0.85
  },
  'pattern-updates': {
    trigger: () => newCodePatternEstablished() || bestPracticeViolation(),
    validation: (content) => validatePatternConsistency(content) && noConflictsDetected(),
    confidence: 0.80
  }
};

function executeIntelligentUpdates() {
  Object.entries(AUTO_UPDATE_CONFIDENCE_RULES).forEach(([updateType, rule]) => {
    if (rule.trigger()) {
      const update = generateUpdate(updateType);
      if (rule.validation(update.content) && rule.confidence > 0.8) {
        executeUpdate(update);
        logAutonomousAction(updateType, rule.confidence);
      } else {
        queueForReview(updateType, update, rule.confidence);
      }
    }
  });
}
```

### Enhanced Update Validation with Context Awareness

```javascript
function validateUpdate(file, content, context = {}) {
  const validationRules = {
    'file-structure.md': (content) => {
      return validateProjectStructure(content) &&
             validateDependencyGraph(content) &&
             validatePerformanceImpact(content, context.performanceBaseline);
    },
    'activeContext.md': (content) => {
      return validateContextFormat(content) &&
             validateModeConsistency(content) &&
             validateProgressTracking(content, context.previousProgress);
    },
    'tasks.md': (content) => {
      return validateTaskFormat(content) &&
             validateTaskPriorities(content) &&
             validateTaskDependencies(content, context.dependencyGraph);
    },
    'angular-patterns.md': (content) => {
      return validatePatternFormat(content) &&
             validatePatternConsistency(content, context.existingPatterns) &&
             validateBestPracticesAlignment(content);
    },
    'performance-metrics.md': (content) => {
      return validateMetricsFormat(content) &&
             validatePerformanceRegression(content, context.performanceHistory) &&
             validateBenchmarkRealism(content);
    }
  };

  const validator = validationRules[file];
  if (!validator) return true;

  const validationResult = validator(content);
  if (!validationResult.isValid) {
    logValidationFailure(file, validationResult.errors);
    return false;
  }

  return true;
}

function intelligentSyncMemoryBank() {
  const updates = detectRequiredUpdates();
  const context = gatherSyncContext();

  // Group updates by impact and priority
  const updateGroups = groupUpdatesByImpact(updates);

  // Execute high-impact, low-risk updates first
  updateGroups.highImpactLowRisk.forEach(update => {
    if (validateUpdate(update.file, update.content, context)) {
      executeUpdate(update);
      logSync(`Auto-updated ${update.file}: ${update.reason}`, update.impact);
    }
  });

  // Queue medium-risk updates for validation
  updateGroups.mediumRisk.forEach(update => {
    queueForValidation(update, context);
  });

  // Require explicit approval for high-risk updates
  updateGroups.highRisk.forEach(update => {
    requireApproval(update, context);
  });
}
```

## Integration Summary

This enhanced protocol ensures:
- **Intelligent mode transitions** based on comprehensive project analysis
- **Context-aware synchronization** with impact assessment
- **Predictive quality gates** that prevent issues before they occur
- **Performance-conscious updates** that maintain system efficiency
- **Security-first approach** with continuous vulnerability monitoring
- **Learning-driven improvements** that evolve with project complexity

The cursor-memory-bank becomes the agent's **intelligent consciousness**, enabling truly autonomous development workflows that not only transcend traditional LLM limitations but actively improve project quality and team productivity.
