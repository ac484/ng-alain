---
description: Memory MCP 記憶體資料管理流程
globs:
alwaysApply: false
---

## 🔍 流程簡介
Memory 提供會話級記憶體管理，支援資料的儲存、讀取、更新與刪除，維持對話間的狀態持久化。

## 🗺️ 流程圖
```
graph TD
    A[讀取記憶] --> B{資料存在?}
    B -->|是| C[返回資料]
    B -->|否| D[寫入新資料]
    D --> E[更新資料]
    E --> F[清理記憶]
```

## ✅ 標準步驟
1. **記憶讀取** - 檢索已儲存資料
2. **資料寫入** - 建立新的記憶項目
3. **內容更新** - 修改現有資料
4. **項目刪除** - 移除特定記憶
5. **記憶清理** - 清空所有資料

## 📝 範例命令/調用格式
- `read`: 讀取記憶內容
- `write`: 寫入新記憶
- `update`: 更新現有記憶
- `delete`: 刪除特定記憶
- `clear`: 清空所有記憶

## 🌟 最佳實踐
- 使用描述性鍵名組織資料
- 定期清理過期記憶項目
- 重要資料寫入前先確認格式

[[calls]]
match = """memory|remember|recall|store data|update memory"""
tool = "memory"


## 智能 session/上下文記憶管理流程

```mermaid
flowchart TD
    Q[用戶查詢/操作] --> R[查 Redis 向量庫]
    R -->|未命中| S[查 session 記憶體 (activeContext.md)]
    S -->|命中| U[回傳/更新 session]
    S -->|未命中| MB[查 Memory-Bank]
    MB -->|命中| US[同步到 session]
    MB -->|未命中| C7[查 context7]
    C7 -->|命中| UC[同步到 session]
    US & UC --> U
    U --> P[定期清理/過時淘汰]
    P --> D[刪除冗餘/過時資訊]
```

### 流程說明
1. **查詢/操作觸發**：用戶查詢或系統操作時，依序查 Redis、session 記憶體、Memory-Bank、context7。
2. **session 命中**：若 session (activeContext.md) 命中，直接回傳並根據新資訊更新。
3. **未命中時同步**：若 Memory-Bank 或 context7 命中，則同步新知到 session，保持上下文新鮮。
4. **定期清理**：定期檢查 session，刪除冗餘、過時、低頻資訊，避免堆積。

### 規則建議
- **寫入時機**：有新決策、新上下文、外部知識命中時寫入/更新 session。
- **清理門檻**：如 7 天未被查詢、內容過時、被新知覆蓋則自動刪除。
- **同步策略**：Memory-Bank/context7 命中時自動同步到 session，提升查詢效率。
- **版本管理**：session 內容有變更時保留 version 與 updated_at。

### （移除偽代碼範例，以下為全閉環自動化擴展說明）

## 全閉環自動化擴展說明
- 本文件所有自動化流程均以 isolation_rules 既有查詢、同步、清理、淘汰等核心流程為基礎。
- 擴展僅在於：
  - 增加智能判斷（如信心分數、查詢頻率、內容新舊）以自動觸發 context7、Redis、Memory-Bank 間的同步與積累。
  - session/上下文記憶自動與外部知識（context7、Redis、Memory-Bank）雙向同步，確保知識新鮮且不冗餘。
  - 定期自動清理過時、冗餘、低頻資訊，維持記憶體健康。
- 所有自動化均不會影響 isolation_rules 既有查詢、決策、記錄、審查等主流程，僅作為輔助優化。
- 流程圖、規則說明皆可直接納入現有流程，不需額外程式碼或手動介入。
- 若需人工審查、日誌追蹤等，仍依 isolation_rules 既有規範執行。

## 查詢合併與來源標註規則

### 合併策略
- 若 context7 與本地知識同時命中，優先顯示 context7（官方/最新），本地知識作為補充。
- 可並列顯示，並明確標註來源（如【官方文件】、【本地知識】）。
- 若內容衝突，提示用戶「官方文件與本地知識不一致，請優先參考官方」。

### 標註格式
- 官方知識：`【官方文件】內容...`
- 本地知識：`【本地知識】內容...`
- 合併回應範例：
  ```
  【官方文件】Angular 20 路由守衛寫法如下...
  【本地知識】你過去常用的寫法為...
  ```

### 用戶交互建議
- 當合併回應時，明確提示「已同時查詢官方文件與本地知識，請優先參考官方內容」。
- 若用戶需要僅看官方或本地知識，可提供切換選項。
- 若內容衝突，主動提醒用戶並建議以官方為準。
