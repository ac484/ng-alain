{
  "version": 3,
  "sources": ["../../../../../../node_modules/@delon/util/fesm2022/config.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, makeEnvironmentProviders, inject, Injectable } from '@angular/core';\nimport { SIGNAL } from '@angular/core/primitives/signals';\nimport { deepMergeKey } from '@delon/util/other';\nclass AlainSVConfig {\n  /** 大小，默认：`large` */\n  size;\n  /** 间距，默认：`32` */\n  gutter;\n  /** 布局，默认：`horizontal` */\n  layout;\n  /** 列数，默认：`3` */\n  col;\n  /** 是否显示默认值，当内容为空值时显示 `-`，默认：`true` */\n  default;\n  /** `label` 固定宽度，若 `null` 或 `undefined` 表示非固定，默认：`null` */\n  labelWidth;\n}\nconst ALAIN_CONFIG = new InjectionToken('alain-config', {\n  providedIn: 'root',\n  factory: ALAIN_CONFIG_FACTORY\n});\nfunction ALAIN_CONFIG_FACTORY() {\n  return {};\n}\nfunction provideAlainConfig(config) {\n  return makeEnvironmentProviders([{\n    provide: ALAIN_CONFIG,\n    useValue: config\n  }]);\n}\nclass AlainConfigService {\n  config = {\n    ...inject(ALAIN_CONFIG, {\n      optional: true\n    })\n  };\n  get(componentName, key) {\n    const res = this.config[componentName] || {};\n    return key ? {\n      [key]: res[key]\n    } : res;\n  }\n  merge(componentName, ...defaultValues) {\n    return deepMergeKey({}, true, ...defaultValues, this.get(componentName));\n  }\n  /**\n   * 将配置附加到当前实例中，支持 Signal 信号\n   */\n  attach(componentThis, componentName, defaultValues) {\n    const data = this.merge(componentName, defaultValues);\n    Object.entries(data).forEach(([key, value]) => {\n      const t = componentThis;\n      const s = t[key]?.[SIGNAL];\n      if (s != null) {\n        s.value = value;\n      } else {\n        t[key] = value;\n      }\n    });\n  }\n  set(componentName, value) {\n    this.config[componentName] = {\n      ...this.config[componentName],\n      ...value\n    };\n  }\n  static ɵfac = function AlainConfigService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AlainConfigService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AlainConfigService,\n    factory: AlainConfigService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AlainConfigService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ALAIN_CONFIG, ALAIN_CONFIG_FACTORY, AlainConfigService, AlainSVConfig, provideAlainConfig };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAIA,IAAM,gBAAN,MAAoB;AAAA;AAAA,EAElB;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AACF;AACA,IAAM,eAAe,IAAI,eAAe,gBAAgB;AAAA,EACtD,YAAY;AAAA,EACZ,SAAS;AACX,CAAC;AACD,SAAS,uBAAuB;AAC9B,SAAO,CAAC;AACV;AACA,SAAS,mBAAmB,QAAQ;AAClC,SAAO,yBAAyB,CAAC;AAAA,IAC/B,SAAS;AAAA,IACT,UAAU;AAAA,EACZ,CAAC,CAAC;AACJ;AACA,IAAM,qBAAN,MAAM,oBAAmB;AAAA,EACvB,SAAS,mBACJ,OAAO,cAAc;AAAA,IACtB,UAAU;AAAA,EACZ,CAAC;AAAA,EAEH,IAAI,eAAe,KAAK;AACtB,UAAM,MAAM,KAAK,OAAO,aAAa,KAAK,CAAC;AAC3C,WAAO,MAAM;AAAA,MACX,CAAC,GAAG,GAAG,IAAI,GAAG;AAAA,IAChB,IAAI;AAAA,EACN;AAAA,EACA,MAAM,kBAAkB,eAAe;AACrC,WAAO,aAAa,CAAC,GAAG,MAAM,GAAG,eAAe,KAAK,IAAI,aAAa,CAAC;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,eAAe,eAAe,eAAe;AAClD,UAAM,OAAO,KAAK,MAAM,eAAe,aAAa;AACpD,WAAO,QAAQ,IAAI,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC7C,YAAM,IAAI;AACV,YAAM,IAAI,EAAE,GAAG,IAAI,MAAM;AACzB,UAAI,KAAK,MAAM;AACb,UAAE,QAAQ;AAAA,MACZ,OAAO;AACL,UAAE,GAAG,IAAI;AAAA,MACX;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,IAAI,eAAe,OAAO;AACxB,SAAK,OAAO,aAAa,IAAI,kCACxB,KAAK,OAAO,aAAa,IACzB;AAAA,EAEP;AAAA,EACA,OAAO,OAAO,SAAS,2BAA2B,mBAAmB;AACnE,WAAO,KAAK,qBAAqB,qBAAoB;AAAA,EACvD;AAAA,EACA,OAAO,QAA0B,mBAAmB;AAAA,IAClD,OAAO;AAAA,IACP,SAAS,oBAAmB;AAAA,IAC5B,YAAY;AAAA,EACd,CAAC;AACH;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,oBAAoB,CAAC;AAAA,IAC3F,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,YAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;",
  "names": []
}
