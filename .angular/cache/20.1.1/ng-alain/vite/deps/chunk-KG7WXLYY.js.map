{
  "version": 3,
  "sources": ["../../../../../../node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-tree.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNode {\n  _title = '';\n  key;\n  level = 0;\n  origin;\n  // Parent Node\n  parentNode = null;\n  _icon = '';\n  _children = [];\n  _isLeaf = false;\n  _isChecked = false;\n  _isSelectable = false;\n  _isDisabled = false;\n  _isDisableCheckbox = false;\n  _isExpanded = false;\n  _isHalfChecked = false;\n  _isSelected = false;\n  _isLoading = false;\n  canHide = false;\n  isMatched = false;\n  service = null;\n  component;\n  /** New added in Tree for easy data access */\n  isStart;\n  isEnd;\n  get treeService() {\n    return this.service || this.parentNode && this.parentNode.treeService;\n  }\n  /**\n   * Init nzTreeNode\n   *\n   * @param option option user's input\n   * @param parent parent node\n   * @param service base nzTreeService\n   */\n  constructor(option, parent = null, service = null) {\n    if (option instanceof NzTreeNode) {\n      return option;\n    }\n    this.service = service || null;\n    this.origin = option;\n    this.key = option.key;\n    this.parentNode = parent;\n    this._title = option.title || '---';\n    this._icon = option.icon || '';\n    this._isLeaf = option.isLeaf || false;\n    this._children = [];\n    // option params\n    this._isChecked = option.checked || false;\n    this._isSelectable = option.disabled || option.selectable !== false;\n    this._isDisabled = option.disabled || false;\n    this._isDisableCheckbox = option.disableCheckbox || false;\n    this._isExpanded = option.isLeaf ? false : option.expanded || false;\n    this._isHalfChecked = false;\n    this._isSelected = !option.disabled && option.selected || false;\n    this._isLoading = false;\n    this.isMatched = false;\n    /**\n     * parent's checked status will affect children while initializing\n     */\n    if (parent) {\n      this.level = parent.level + 1;\n    } else {\n      this.level = 0;\n    }\n    const s = this.treeService;\n    /**\n     * post process of current treeNode\n     */\n    s?.treeNodePostProcessor?.(this);\n    /**\n     * instantiate children tree nodes\n     */\n    if (typeof option.children !== 'undefined' && option.children !== null) {\n      option.children.forEach(nodeOptions => {\n        if (s && !s.isCheckStrictly && option.checked && !option.disabled && !nodeOptions.disabled && !nodeOptions.disableCheckbox) {\n          nodeOptions.checked = option.checked;\n        }\n        this._children.push(new NzTreeNode(nodeOptions, this));\n      });\n    }\n  }\n  /**\n   * auto generate\n   * get\n   * set\n   */\n  get title() {\n    return this._title;\n  }\n  set title(value) {\n    this._title = value;\n    this.update();\n  }\n  get icon() {\n    return this._icon;\n  }\n  set icon(value) {\n    this._icon = value;\n    this.update();\n  }\n  get children() {\n    return this._children;\n  }\n  set children(value) {\n    this._children = value;\n    this.update();\n  }\n  get isLeaf() {\n    return this._isLeaf;\n  }\n  set isLeaf(value) {\n    this._isLeaf = value;\n    this.update();\n  }\n  get isChecked() {\n    return this._isChecked;\n  }\n  set isChecked(value) {\n    this._isChecked = value;\n    this.origin.checked = value;\n    this.afterValueChange('isChecked');\n  }\n  get isHalfChecked() {\n    return this._isHalfChecked;\n  }\n  set isHalfChecked(value) {\n    this._isHalfChecked = value;\n    this.afterValueChange('isHalfChecked');\n  }\n  get isSelectable() {\n    return this._isSelectable;\n  }\n  set isSelectable(value) {\n    this._isSelectable = value;\n    this.update();\n  }\n  get isDisabled() {\n    return this._isDisabled;\n  }\n  set isDisabled(value) {\n    this._isDisabled = value;\n    this.update();\n  }\n  get isDisableCheckbox() {\n    return this._isDisableCheckbox;\n  }\n  set isDisableCheckbox(value) {\n    this._isDisableCheckbox = value;\n    this.update();\n  }\n  get isExpanded() {\n    return this._isExpanded;\n  }\n  set isExpanded(value) {\n    this._isExpanded = value;\n    this.origin.expanded = value;\n    this.afterValueChange('isExpanded');\n    this.afterValueChange('reRender');\n  }\n  get isSelected() {\n    return this._isSelected;\n  }\n  set isSelected(value) {\n    this._isSelected = value;\n    this.origin.selected = value;\n    this.afterValueChange('isSelected');\n  }\n  get isLoading() {\n    return this._isLoading;\n  }\n  set isLoading(value) {\n    this._isLoading = value;\n    this.update();\n  }\n  setSyncChecked(checked = false, halfChecked = false) {\n    this.setChecked(checked, halfChecked);\n    if (this.treeService && !this.treeService.isCheckStrictly) {\n      this.treeService.conduct(this);\n    }\n  }\n  setChecked(checked = false, halfChecked = false) {\n    this.origin.checked = checked;\n    this.isChecked = checked;\n    this.isHalfChecked = halfChecked;\n  }\n  setExpanded(value) {\n    this._isExpanded = value;\n    this.origin.expanded = value;\n    this.afterValueChange('isExpanded');\n  }\n  getParentNode() {\n    return this.parentNode;\n  }\n  getChildren() {\n    return this.children;\n  }\n  /**\n   * Support appending child nodes by position. Leaf node cannot be appended.\n   */\n  addChildren(children, childPos = -1) {\n    if (!this.isLeaf) {\n      children.forEach(node => {\n        const refreshLevel = n => {\n          n.getChildren().forEach(c => {\n            c.level = c.getParentNode().level + 1;\n            // flush origin\n            c.origin.level = c.level;\n            refreshLevel(c);\n          });\n        };\n        let child = node;\n        if (child instanceof NzTreeNode) {\n          child.parentNode = this;\n        } else {\n          child = new NzTreeNode(node, this);\n        }\n        child.level = this.level + 1;\n        child.origin.level = child.level;\n        refreshLevel(child);\n        try {\n          childPos === -1 ? this.children.push(child) : this.children.splice(childPos, 0, child);\n          // flush origin\n        } catch {\n          // noop\n        }\n      });\n      this.origin.children = this.getChildren().map(v => v.origin);\n      // remove loading state\n      this.isLoading = false;\n    }\n    this.afterValueChange('addChildren');\n    this.afterValueChange('reRender');\n  }\n  clearChildren() {\n    // refresh checked state\n    this.afterValueChange('clearChildren');\n    this.children = [];\n    this.origin.children = [];\n    this.afterValueChange('reRender');\n  }\n  remove() {\n    const parentNode = this.getParentNode();\n    if (parentNode) {\n      parentNode.children = parentNode.getChildren().filter(v => v.key !== this.key);\n      parentNode.origin.children = parentNode.origin.children.filter(v => v.key !== this.key);\n      this.afterValueChange('remove');\n      this.afterValueChange('reRender');\n    }\n  }\n  afterValueChange(key) {\n    if (this.treeService) {\n      switch (key) {\n        case 'isChecked':\n          this.treeService.setCheckedNodeList(this);\n          break;\n        case 'isHalfChecked':\n          this.treeService.setHalfCheckedNodeList(this);\n          break;\n        case 'isExpanded':\n          this.treeService.setExpandedNodeList(this);\n          break;\n        case 'isSelected':\n          this.treeService.setNodeActive(this);\n          break;\n        case 'clearChildren':\n          this.treeService.afterRemove(this.getChildren());\n          break;\n        case 'remove':\n          this.treeService.afterRemove([this]);\n          break;\n        case 'reRender':\n          this.treeService.flattenTreeData(this.treeService.rootNodes, this.treeService.getExpandedNodeList().map(v => v.key));\n          break;\n      }\n    }\n    this.update();\n  }\n  update() {\n    if (this.component) {\n      this.component.markForCheck();\n    }\n  }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction isCheckDisabled(node) {\n  const {\n    isDisabled,\n    isDisableCheckbox\n  } = node;\n  return !!(isDisabled || isDisableCheckbox);\n}\nfunction isInArray(needle, haystack) {\n  return haystack.length > 0 && haystack.indexOf(needle) > -1;\n}\nfunction getPosition(level, index) {\n  return `${level}-${index}`;\n}\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n *\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nfunction flattenTreeData(treeNodeList = [], expandedKeys = []) {\n  const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  const flattenList = [];\n  function dig(list, parent = null) {\n    return list.map((treeNode, index) => {\n      const pos = getPosition(parent ? parent.pos : '0', index);\n      const mergedKey = getKey(treeNode.key, pos);\n      treeNode.isStart = [...(parent ? parent.isStart : []), index === 0];\n      treeNode.isEnd = [...(parent ? parent.isEnd : []), index === list.length - 1];\n      // Add FlattenDataNode into list\n      // TODO: only need data here.\n      const flattenNode = {\n        parent,\n        pos,\n        children: [],\n        data: treeNode,\n        isStart: [...(parent ? parent.isStart : []), index === 0],\n        isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]\n      };\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey) || treeNode.isExpanded) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeBaseService {\n  DRAG_SIDE_RANGE = 0.25;\n  DRAG_MIN_GAP = 2;\n  isCheckStrictly = false;\n  isMultiple = false;\n  selectedNode;\n  rootNodes = [];\n  flattenNodes$ = new BehaviorSubject([]);\n  selectedNodeList = [];\n  expandedNodeList = [];\n  checkedNodeList = [];\n  halfCheckedNodeList = [];\n  matchedNodeList = [];\n  /**\n   * handle to post process a tree node when it's instantiating, note that its children haven't been initiated yet\n   */\n  treeNodePostProcessor;\n  /**\n   * reset tree nodes will clear default node list\n   */\n  initTree(nzNodes) {\n    this.rootNodes = nzNodes;\n    this.expandedNodeList = [];\n    this.selectedNodeList = [];\n    this.halfCheckedNodeList = [];\n    this.checkedNodeList = [];\n    this.matchedNodeList = [];\n  }\n  flattenTreeData(nzNodes, expandedKeys = []) {\n    this.flattenNodes$.next(flattenTreeData(nzNodes, expandedKeys).map(item => item.data));\n  }\n  getSelectedNode() {\n    return this.selectedNode;\n  }\n  /**\n   * get some list\n   */\n  getSelectedNodeList() {\n    return this.conductNodeState('select');\n  }\n  /**\n   * get checked node keys\n   */\n  getCheckedNodeKeys() {\n    const keys = [];\n    const checkedNodes = this.getCheckedNodeList();\n    const calc = nodes => {\n      nodes.forEach(node => {\n        keys.push(node.key);\n        if (node.children.length < 1) return;\n        calc(node.children);\n      });\n    };\n    calc(checkedNodes);\n    return keys;\n  }\n  /**\n   * return checked nodes\n   */\n  getCheckedNodeList() {\n    return this.conductNodeState('check');\n  }\n  getHalfCheckedNodeList() {\n    return this.conductNodeState('halfCheck');\n  }\n  /**\n   * return expanded nodes\n   */\n  getExpandedNodeList() {\n    return this.conductNodeState('expand');\n  }\n  /**\n   * return search matched nodes\n   */\n  getMatchedNodeList() {\n    return this.conductNodeState('match');\n  }\n  isArrayOfNzTreeNode(value) {\n    return value.every(item => item instanceof NzTreeNode);\n  }\n  /**\n   * set drag node\n   */\n  setSelectedNode(node) {\n    this.selectedNode = node;\n  }\n  /**\n   * set node selected status\n   */\n  setNodeActive(node) {\n    if (!this.isMultiple && node.isSelected) {\n      this.selectedNodeList.forEach(n => {\n        if (node.key !== n.key) {\n          // reset other nodes\n          n.isSelected = false;\n        }\n      });\n      // single mode: remove pre node\n      this.selectedNodeList = [];\n    }\n    this.setSelectedNodeList(node, this.isMultiple);\n  }\n  /**\n   * add or remove node to selectedNodeList\n   */\n  setSelectedNodeList(node, isMultiple = false) {\n    const index = this.getIndexOfArray(this.selectedNodeList, node.key);\n    if (isMultiple) {\n      if (node.isSelected && index === -1) {\n        this.selectedNodeList.push(node);\n      }\n    } else {\n      if (node.isSelected && index === -1) {\n        this.selectedNodeList = [node];\n      }\n    }\n    if (!node.isSelected) {\n      this.selectedNodeList = this.selectedNodeList.filter(n => n.key !== node.key);\n    }\n  }\n  /**\n   * merge checked nodes\n   */\n  setHalfCheckedNodeList(node) {\n    const index = this.getIndexOfArray(this.halfCheckedNodeList, node.key);\n    if (node.isHalfChecked && index === -1) {\n      this.halfCheckedNodeList.push(node);\n    } else if (!node.isHalfChecked && index > -1) {\n      this.halfCheckedNodeList = this.halfCheckedNodeList.filter(n => node.key !== n.key);\n    }\n  }\n  setCheckedNodeList(node) {\n    const index = this.getIndexOfArray(this.checkedNodeList, node.key);\n    if (node.isChecked && index === -1) {\n      this.checkedNodeList.push(node);\n    } else if (!node.isChecked && index > -1) {\n      this.checkedNodeList = this.checkedNodeList.filter(n => node.key !== n.key);\n    }\n  }\n  /**\n   * conduct checked/selected/expanded keys\n   */\n  conductNodeState(type = 'check') {\n    let resultNodesList = [];\n    switch (type) {\n      case 'select':\n        resultNodesList = this.selectedNodeList;\n        break;\n      case 'expand':\n        resultNodesList = this.expandedNodeList;\n        break;\n      case 'match':\n        resultNodesList = this.matchedNodeList;\n        break;\n      case 'check':\n        {\n          resultNodesList = this.checkedNodeList;\n          const isIgnore = node => {\n            const parentNode = node.getParentNode();\n            if (parentNode) {\n              if (this.checkedNodeList.findIndex(n => n.key === parentNode.key) > -1) {\n                return true;\n              } else {\n                return isIgnore(parentNode);\n              }\n            }\n            return false;\n          };\n          // merge checked\n          if (!this.isCheckStrictly) {\n            resultNodesList = this.checkedNodeList.filter(n => !isIgnore(n));\n          }\n          break;\n        }\n      case 'halfCheck':\n        if (!this.isCheckStrictly) {\n          resultNodesList = this.halfCheckedNodeList;\n        }\n        break;\n    }\n    return resultNodesList;\n  }\n  /**\n   * set expanded nodes\n   */\n  setExpandedNodeList(node) {\n    if (node.isLeaf) {\n      return;\n    }\n    const index = this.getIndexOfArray(this.expandedNodeList, node.key);\n    if (node.isExpanded && index === -1) {\n      this.expandedNodeList.push(node);\n    } else if (!node.isExpanded && index > -1) {\n      this.expandedNodeList.splice(index, 1);\n    }\n  }\n  setMatchedNodeList(node) {\n    const index = this.getIndexOfArray(this.matchedNodeList, node.key);\n    if (node.isMatched && index === -1) {\n      this.matchedNodeList.push(node);\n    } else if (!node.isMatched && index > -1) {\n      this.matchedNodeList.splice(index, 1);\n    }\n  }\n  /**\n   * check state\n   *\n   * @param isCheckStrictly\n   */\n  refreshCheckState(isCheckStrictly = false) {\n    if (isCheckStrictly) {\n      return;\n    }\n    this.checkedNodeList.forEach(node => {\n      this.conduct(node, isCheckStrictly);\n    });\n  }\n  // reset other node checked state based current node\n  conduct(node, isCheckStrictly = false) {\n    const isChecked = node.isChecked;\n    if (node && !isCheckStrictly) {\n      this.conductUp(node);\n      this.conductDown(node, isChecked);\n    }\n  }\n  /**\n   * 1、children half checked\n   * 2、children all checked, parent checked\n   * 3、no children checked\n   */\n  conductUp(node) {\n    const parentNode = node.getParentNode();\n    if (parentNode) {\n      if (!isCheckDisabled(parentNode)) {\n        if (parentNode.children.every(child => isCheckDisabled(child) || !child.isHalfChecked && child.isChecked)) {\n          parentNode.isChecked = true;\n          parentNode.isHalfChecked = false;\n        } else if (parentNode.children.some(child => child.isHalfChecked || child.isChecked)) {\n          parentNode.isChecked = false;\n          parentNode.isHalfChecked = true;\n        } else {\n          parentNode.isChecked = false;\n          parentNode.isHalfChecked = false;\n        }\n      }\n      this.setCheckedNodeList(parentNode);\n      this.setHalfCheckedNodeList(parentNode);\n      this.conductUp(parentNode);\n    }\n  }\n  /**\n   * reset child check state\n   */\n  conductDown(node, value) {\n    if (!isCheckDisabled(node)) {\n      node.isChecked = value;\n      node.isHalfChecked = false;\n      this.setCheckedNodeList(node);\n      this.setHalfCheckedNodeList(node);\n      node.children.forEach(n => {\n        this.conductDown(n, value);\n      });\n    }\n  }\n  /**\n   * flush after delete node\n   */\n  afterRemove(nodes) {\n    // to reset selectedNodeList & expandedNodeList\n    const loopNode = node => {\n      // remove selected node\n      this.selectedNodeList = this.selectedNodeList.filter(n => n.key !== node.key);\n      // remove expanded node\n      this.expandedNodeList = this.expandedNodeList.filter(n => n.key !== node.key);\n      // remove checked node\n      this.checkedNodeList = this.checkedNodeList.filter(n => n.key !== node.key);\n      if (node.children) {\n        node.children.forEach(child => {\n          loopNode(child);\n        });\n      }\n    };\n    nodes.forEach(n => {\n      loopNode(n);\n    });\n    this.refreshCheckState(this.isCheckStrictly);\n  }\n  /**\n   * drag event\n   */\n  refreshDragNode(node) {\n    if (node.children.length === 0) {\n      // until root\n      this.conductUp(node);\n    } else {\n      node.children.forEach(child => {\n        this.refreshDragNode(child);\n      });\n    }\n  }\n  // reset node level\n  resetNodeLevel(node) {\n    const parentNode = node.getParentNode();\n    if (parentNode) {\n      node.level = parentNode.level + 1;\n    } else {\n      node.level = 0;\n    }\n    for (const child of node.children) {\n      this.resetNodeLevel(child);\n    }\n  }\n  calcDropPosition(event) {\n    const {\n      clientY\n    } = event;\n    // to fix firefox undefined\n    const {\n      top,\n      bottom,\n      height\n    } = event.target.getBoundingClientRect();\n    const des = Math.max(height * this.DRAG_SIDE_RANGE, this.DRAG_MIN_GAP);\n    if (clientY <= top + des) {\n      return -1;\n    } else if (clientY >= bottom - des) {\n      return 1;\n    }\n    return 0;\n  }\n  /**\n   * drop\n   * 0: inner -1: pre 1: next\n   */\n  dropAndApply(targetNode, dragPos = -1) {\n    if (!targetNode || dragPos > 1) {\n      return;\n    }\n    const treeService = targetNode.treeService;\n    const targetParent = targetNode.getParentNode();\n    const isSelectedRootNode = this.selectedNode.getParentNode();\n    // remove the dragNode\n    if (isSelectedRootNode) {\n      isSelectedRootNode.children = isSelectedRootNode.children.filter(n => n.key !== this.selectedNode.key);\n    } else {\n      this.rootNodes = this.rootNodes.filter(n => n.key !== this.selectedNode.key);\n    }\n    switch (dragPos) {\n      case 0:\n        targetNode.addChildren([this.selectedNode]);\n        this.resetNodeLevel(targetNode);\n        break;\n      case -1:\n      case 1:\n        {\n          const tIndex = dragPos === 1 ? 1 : 0;\n          if (targetParent) {\n            targetParent.addChildren([this.selectedNode], targetParent.children.indexOf(targetNode) + tIndex);\n            const parentNode = this.selectedNode.getParentNode();\n            if (parentNode) {\n              this.resetNodeLevel(parentNode);\n            }\n          } else {\n            const targetIndex = this.rootNodes.indexOf(targetNode) + tIndex;\n            // Insert root node.\n            this.rootNodes.splice(targetIndex, 0, this.selectedNode);\n            this.rootNodes[targetIndex].parentNode = null;\n            this.resetNodeLevel(this.rootNodes[targetIndex]);\n          }\n          break;\n        }\n    }\n    // flush all nodes\n    this.rootNodes.forEach(child => {\n      if (!child.treeService) {\n        child.service = treeService;\n      }\n      this.refreshDragNode(child);\n    });\n  }\n  /**\n   * emit Structure\n   * eventName\n   * node\n   * event: MouseEvent / DragEvent\n   * dragNode\n   */\n  formatEvent(eventName, node, event) {\n    const emitStructure = {\n      eventName,\n      node,\n      event\n    };\n    switch (eventName) {\n      case 'dragstart':\n      case 'dragenter':\n      case 'dragover':\n      case 'dragleave':\n      case 'drop':\n      case 'dragend':\n        Object.assign(emitStructure, {\n          dragNode: this.getSelectedNode()\n        });\n        break;\n      case 'click':\n      case 'dblclick':\n        Object.assign(emitStructure, {\n          selectedKeys: this.selectedNodeList\n        });\n        Object.assign(emitStructure, {\n          nodes: this.selectedNodeList\n        });\n        Object.assign(emitStructure, {\n          keys: this.selectedNodeList.map(n => n.key)\n        });\n        break;\n      case 'check':\n        {\n          const checkedNodeList = this.getCheckedNodeList();\n          Object.assign(emitStructure, {\n            checkedKeys: checkedNodeList\n          });\n          Object.assign(emitStructure, {\n            nodes: checkedNodeList\n          });\n          Object.assign(emitStructure, {\n            keys: checkedNodeList.map(n => n.key)\n          });\n          break;\n        }\n      case 'search':\n        Object.assign(emitStructure, {\n          matchedKeys: this.getMatchedNodeList()\n        });\n        Object.assign(emitStructure, {\n          nodes: this.getMatchedNodeList()\n        });\n        Object.assign(emitStructure, {\n          keys: this.getMatchedNodeList().map(n => n.key)\n        });\n        break;\n      case 'expand':\n        Object.assign(emitStructure, {\n          nodes: this.expandedNodeList\n        });\n        Object.assign(emitStructure, {\n          keys: this.expandedNodeList.map(n => n.key)\n        });\n        break;\n    }\n    return emitStructure;\n  }\n  /**\n   * New functions for flatten nodes\n   */\n  getIndexOfArray(list, key) {\n    return list.findIndex(v => v.key === key);\n  }\n  /**\n   * Render by nzCheckedKeys\n   * When keys equals null, just render with checkStrictly\n   *\n   * @param keys\n   * @param checkStrictly\n   */\n  conductCheck(keys, checkStrictly) {\n    this.checkedNodeList = [];\n    this.halfCheckedNodeList = [];\n    const calc = nodes => {\n      nodes.forEach(node => {\n        if (keys === null) {\n          // render tree if no default checked keys found\n          node.isChecked = !!node.origin.checked;\n        } else {\n          if (isInArray(node.key, keys || [])) {\n            node.isChecked = true;\n            node.isHalfChecked = false;\n          } else {\n            node.isChecked = false;\n            node.isHalfChecked = false;\n          }\n        }\n        if (node.children.length > 0) {\n          calc(node.children);\n        }\n      });\n    };\n    calc(this.rootNodes);\n    this.refreshCheckState(checkStrictly);\n  }\n  conductExpandedKeys(keys = []) {\n    const expandedKeySet = new Set(keys === true ? [] : keys);\n    this.expandedNodeList = [];\n    const calc = nodes => {\n      nodes.forEach(node => {\n        node.setExpanded(keys === true || expandedKeySet.has(node.key) || node.isExpanded === true);\n        if (node.isExpanded) {\n          this.setExpandedNodeList(node);\n        }\n        if (node.children.length > 0) {\n          calc(node.children);\n        }\n      });\n    };\n    calc(this.rootNodes);\n  }\n  conductSelectedKeys(keys, isMulti) {\n    this.selectedNodeList.forEach(node => node.isSelected = false);\n    this.selectedNodeList = [];\n    const calc = nodes => nodes.every(node => {\n      if (isInArray(node.key, keys)) {\n        node.isSelected = true;\n        this.setSelectedNodeList(node);\n        if (!isMulti) {\n          // if not support multi select\n          return false;\n        }\n      } else {\n        node.isSelected = false;\n      }\n      if (node.children.length > 0) {\n        // Recursion\n        return calc(node.children);\n      }\n      return true;\n    });\n    calc(this.rootNodes);\n  }\n  /**\n   * Expand parent nodes by child node\n   *\n   * @param node\n   */\n  expandNodeAllParentBySearch(node) {\n    const calc = n => {\n      if (n) {\n        n.canHide = false;\n        n.setExpanded(true);\n        this.setExpandedNodeList(n);\n        if (n.getParentNode()) {\n          return calc(n.getParentNode());\n        }\n      }\n    };\n    calc(node.getParentNode());\n  }\n  static ɵfac = function NzTreeBaseService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NzTreeBaseService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NzTreeBaseService,\n    factory: NzTreeBaseService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeBaseService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst NzTreeHigherOrderServiceToken = new InjectionToken('NzTreeHigherOrder');\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeBase {\n  nzTreeService;\n  constructor(nzTreeService) {\n    this.nzTreeService = nzTreeService;\n  }\n  /**\n   * Coerces a value({@link any[]}) to a TreeNodes({@link NzTreeNode[]})\n   */\n  coerceTreeNodes(value) {\n    let nodes = [];\n    if (!this.nzTreeService.isArrayOfNzTreeNode(value)) {\n      // has not been new NzTreeNode\n      nodes = value.map(item => new NzTreeNode(item, null, this.nzTreeService));\n    } else {\n      nodes = value.map(item => {\n        item.service = this.nzTreeService;\n        return item;\n      });\n    }\n    return nodes;\n  }\n  /**\n   * Get all nodes({@link NzTreeNode})\n   */\n  getTreeNodes() {\n    return this.nzTreeService.rootNodes;\n  }\n  /**\n   * Get {@link NzTreeNode} with key\n   */\n  getTreeNodeByKey(key) {\n    // flat tree nodes\n    const nodes = [];\n    const getNode = node => {\n      nodes.push(node);\n      node.getChildren().forEach(n => {\n        getNode(n);\n      });\n    };\n    this.getTreeNodes().forEach(n => {\n      getNode(n);\n    });\n    return nodes.find(n => n.key === key) || null;\n  }\n  /**\n   * Get checked nodes(merged)\n   */\n  getCheckedNodeList() {\n    return this.nzTreeService.getCheckedNodeList();\n  }\n  /**\n   * Get selected nodes\n   */\n  getSelectedNodeList() {\n    return this.nzTreeService.getSelectedNodeList();\n  }\n  /**\n   * Get half checked nodes\n   */\n  getHalfCheckedNodeList() {\n    return this.nzTreeService.getHalfCheckedNodeList();\n  }\n  /**\n   * Get expanded nodes\n   */\n  getExpandedNodeList() {\n    return this.nzTreeService.getExpandedNodeList();\n  }\n  /**\n   * Get matched nodes(if nzSearchValue is not null)\n   */\n  getMatchedNodeList() {\n    return this.nzTreeService.getMatchedNodeList();\n  }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTreeBase, NzTreeBaseService, NzTreeHigherOrderServiceToken, NzTreeNode, flattenTreeData, getKey, getPosition, isCheckDisabled, isInArray };\n"],
  "mappings": "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",
  "names": []
}
