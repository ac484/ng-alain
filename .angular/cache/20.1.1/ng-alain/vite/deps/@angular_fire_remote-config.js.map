{
  "version": 3,
  "sources": ["../../../../../../node_modules/@firebase/remote-config/dist/esm/index.esm2017.js", "../../../../../../node_modules/@angular/fire/node_modules/rxfire/remote-config/index.esm.js", "../../../../../../node_modules/@angular/fire/fesm2022/angular-fire-remote-config.mjs"],
  "sourcesContent": ["import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, deepEqual, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\n\nconst name = \"@firebase/remote-config\";\nconst version = \"0.6.5\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nclass RemoteConfigAbortSignal {\n    constructor() {\n        this.listeners = [];\n    }\n    addEventListener(listener) {\n        this.listeners.push(listener);\n    }\n    abort() {\n        this.listeners.forEach(listener => listener());\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RC_COMPONENT_NAME = 'remote-config';\nconst RC_CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS = 100;\nconst RC_CUSTOM_SIGNAL_KEY_MAX_LENGTH = 250;\nconst RC_CUSTOM_SIGNAL_VALUE_MAX_LENGTH = 500;\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ERROR_DESCRIPTION_MAP = {\n    [\"already-initialized\" /* ErrorCode.ALREADY_INITIALIZED */]: 'Remote Config already initialized',\n    [\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */]: 'Undefined window object. This SDK only supports usage in a browser environment.',\n    [\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */]: 'Undefined project identifier. Check Firebase app initialization.',\n    [\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */]: 'Undefined API key. Check Firebase app initialization.',\n    [\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */]: 'Undefined app identifier. Check Firebase app initialization.',\n    [\"storage-open\" /* ErrorCode.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n    [\"storage-get\" /* ErrorCode.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n    [\"storage-set\" /* ErrorCode.STORAGE_SET */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n    [\"storage-delete\" /* ErrorCode.STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n    [\"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */]: 'Fetch client failed to connect to a network. Check Internet connection.' +\n        ' Original error: {$originalErrorMessage}.',\n    [\"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */]: 'The config fetch request timed out. ' +\n        ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n    [\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\n        ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n    [\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */]: 'Fetch client could not parse response.' +\n        ' Original error: {$originalErrorMessage}.',\n    [\"fetch-status\" /* ErrorCode.FETCH_STATUS */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n    [\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */]: 'Indexed DB is not supported by current browser',\n    [\"custom-signal-max-allowed-signals\" /* ErrorCode.CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS */]: 'Setting more than {$maxSignals} custom signals is not supported.'\n};\nconst ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);\n// Note how this is like typeof/instanceof, but for ErrorCode.\nfunction hasErrorCode(e, errorCode) {\n    return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\nclass Value {\n    constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {\n        this._source = _source;\n        this._value = _value;\n    }\n    asString() {\n        return this._value;\n    }\n    asBoolean() {\n        if (this._source === 'static') {\n            return DEFAULT_VALUE_FOR_BOOLEAN;\n        }\n        return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n    }\n    asNumber() {\n        if (this._source === 'static') {\n            return DEFAULT_VALUE_FOR_NUMBER;\n        }\n        let num = Number(this._value);\n        if (isNaN(num)) {\n            num = DEFAULT_VALUE_FOR_NUMBER;\n        }\n        return num;\n    }\n    getSource() {\n        return this._source;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n * @param options - Optional. The {@link RemoteConfigOptions} with which to instantiate the\n *     Remote Config instance.\n * @returns A {@link RemoteConfig} instance.\n *\n * @public\n */\nfunction getRemoteConfig(app = getApp(), options = {}) {\n    var _a, _b;\n    app = getModularInstance(app);\n    const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n    if (rcProvider.isInitialized()) {\n        const initialOptions = rcProvider.getOptions();\n        if (deepEqual(initialOptions, options)) {\n            return rcProvider.getImmediate();\n        }\n        throw ERROR_FACTORY.create(\"already-initialized\" /* ErrorCode.ALREADY_INITIALIZED */);\n    }\n    rcProvider.initialize({ options });\n    const rc = rcProvider.getImmediate();\n    if (options.initialFetchResponse) {\n        // We use these initial writes as the initialization promise since they will hydrate the same\n        // fields that `storageCache.loadFromStorage` would set.\n        rc._initializePromise = Promise.all([\n            rc._storage.setLastSuccessfulFetchResponse(options.initialFetchResponse),\n            rc._storage.setActiveConfigEtag(((_a = options.initialFetchResponse) === null || _a === void 0 ? void 0 : _a.eTag) || ''),\n            rc._storageCache.setLastSuccessfulFetchTimestampMillis(Date.now()),\n            rc._storageCache.setLastFetchStatus('success'),\n            rc._storageCache.setActiveConfig(((_b = options.initialFetchResponse) === null || _b === void 0 ? void 0 : _b.config) || {})\n        ]).then();\n        // The `storageCache` methods above set their in-memory fields synchronously, so it's\n        // safe to declare our initialization complete at this point.\n        rc._isInitializationComplete = true;\n    }\n    return rc;\n}\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nasync function activate(remoteConfig) {\n    const rc = getModularInstance(remoteConfig);\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n        rc._storage.getLastSuccessfulFetchResponse(),\n        rc._storage.getActiveConfigEtag()\n    ]);\n    if (!lastSuccessfulFetchResponse ||\n        !lastSuccessfulFetchResponse.config ||\n        !lastSuccessfulFetchResponse.eTag ||\n        lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\n        // Either there is no successful fetched config, or is the same as current active\n        // config.\n        return false;\n    }\n    await Promise.all([\n        rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n        rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n    ]);\n    return true;\n}\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nfunction ensureInitialized(remoteConfig) {\n    const rc = getModularInstance(remoteConfig);\n    if (!rc._initializePromise) {\n        rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n            rc._isInitializationComplete = true;\n        });\n    }\n    return rc._initializePromise;\n}\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @public\n */\nasync function fetchConfig(remoteConfig) {\n    const rc = getModularInstance(remoteConfig);\n    // Aborts the request after the given timeout, causing the fetch call to\n    // reject with an `AbortError`.\n    //\n    // <p>Aborting after the request completes is a no-op, so we don't need a\n    // corresponding `clearTimeout`.\n    //\n    // Locating abort logic here because:\n    // * it uses a developer setting (timeout)\n    // * it applies to all retries (like curl's max-time arg)\n    // * it is consistent with the Fetch API's signal input\n    const abortSignal = new RemoteConfigAbortSignal();\n    setTimeout(async () => {\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n        abortSignal.abort();\n    }, rc.settings.fetchTimeoutMillis);\n    const customSignals = rc._storageCache.getCustomSignals();\n    if (customSignals) {\n        rc._logger.debug(`Fetching config with custom signals: ${JSON.stringify(customSignals)}`);\n    }\n    // Catches *all* errors thrown by client so status can be set consistently.\n    try {\n        await rc._client.fetch({\n            cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n            signal: abortSignal,\n            customSignals\n        });\n        await rc._storageCache.setLastFetchStatus('success');\n    }\n    catch (e) {\n        const lastFetchStatus = hasErrorCode(e, \"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */)\n            ? 'throttle'\n            : 'failure';\n        await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n        throw e;\n    }\n}\n/**\n * Gets all config.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nfunction getAll(remoteConfig) {\n    const rc = getModularInstance(remoteConfig);\n    return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {\n        allConfigs[key] = getValue(remoteConfig, key);\n        return allConfigs;\n    }, {});\n}\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nfunction getBoolean(remoteConfig, key) {\n    return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nfunction getNumber(remoteConfig, key) {\n    return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nfunction getString(remoteConfig, key) {\n    return getValue(getModularInstance(remoteConfig), key).asString();\n}\n/**\n * Gets the {@link Value} for the given key.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nfunction getValue(remoteConfig, key) {\n    const rc = getModularInstance(remoteConfig);\n    if (!rc._isInitializationComplete) {\n        rc._logger.debug(`A value was requested for key \"${key}\" before SDK initialization completed.` +\n            ' Await on ensureInitialized if the intent was to get a previously activated value.');\n    }\n    const activeConfig = rc._storageCache.getActiveConfig();\n    if (activeConfig && activeConfig[key] !== undefined) {\n        return new Value('remote', activeConfig[key]);\n    }\n    else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n        return new Value('default', String(rc.defaultConfig[key]));\n    }\n    rc._logger.debug(`Returning static value for key \"${key}\".` +\n        ' Define a default or remote value if this is unintentional.');\n    return new Value('static');\n}\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nfunction setLogLevel(remoteConfig, logLevel) {\n    const rc = getModularInstance(remoteConfig);\n    switch (logLevel) {\n        case 'debug':\n            rc._logger.logLevel = LogLevel.DEBUG;\n            break;\n        case 'silent':\n            rc._logger.logLevel = LogLevel.SILENT;\n            break;\n        default:\n            rc._logger.logLevel = LogLevel.ERROR;\n    }\n}\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1 = {}, obj2 = {}) {\n    return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\n}\n/**\n * Sets the custom signals for the app instance.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param customSignals - Map (key, value) of the custom signals to be set for the app instance. If\n * a key already exists, the value is overwritten. Setting the value of a custom signal to null\n * unsets the signal. The signals will be persisted locally on the client.\n *\n * @public\n */\nasync function setCustomSignals(remoteConfig, customSignals) {\n    const rc = getModularInstance(remoteConfig);\n    if (Object.keys(customSignals).length === 0) {\n        return;\n    }\n    // eslint-disable-next-line guard-for-in\n    for (const key in customSignals) {\n        if (key.length > RC_CUSTOM_SIGNAL_KEY_MAX_LENGTH) {\n            rc._logger.error(`Custom signal key ${key} is too long, max allowed length is ${RC_CUSTOM_SIGNAL_KEY_MAX_LENGTH}.`);\n            return;\n        }\n        const value = customSignals[key];\n        if (typeof value === 'string' &&\n            value.length > RC_CUSTOM_SIGNAL_VALUE_MAX_LENGTH) {\n            rc._logger.error(`Value supplied for custom signal ${key} is too long, max allowed length is ${RC_CUSTOM_SIGNAL_VALUE_MAX_LENGTH}.`);\n            return;\n        }\n    }\n    try {\n        await rc._storageCache.setCustomSignals(customSignals);\n    }\n    catch (error) {\n        rc._logger.error(`Error encountered while setting custom signals: ${error}`);\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nclass CachingClient {\n    constructor(client, storage, storageCache, logger) {\n        this.client = client;\n        this.storage = storage;\n        this.storageCache = storageCache;\n        this.logger = logger;\n    }\n    /**\n     * Returns true if the age of the cached fetched configs is less than or equal to\n     * {@link Settings#minimumFetchIntervalInSeconds}.\n     *\n     * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n     * native Fetch API.\n     *\n     * <p>Visible for testing.\n     */\n    isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n        // Cache can only be fresh if it's populated.\n        if (!lastSuccessfulFetchTimestampMillis) {\n            this.logger.debug('Config fetch cache check. Cache unpopulated.');\n            return false;\n        }\n        // Calculates age of cache entry.\n        const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n        const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n        this.logger.debug('Config fetch cache check.' +\n            ` Cache age millis: ${cacheAgeMillis}.` +\n            ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n            ` Is cache hit: ${isCachedDataFresh}.`);\n        return isCachedDataFresh;\n    }\n    async fetch(request) {\n        // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n        const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([\n            this.storage.getLastSuccessfulFetchTimestampMillis(),\n            this.storage.getLastSuccessfulFetchResponse()\n        ]);\n        // Exits early on cache hit.\n        if (lastSuccessfulFetchResponse &&\n            this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\n            return lastSuccessfulFetchResponse;\n        }\n        // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n        // that allows the caller to pass an ETag.\n        request.eTag =\n            lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n        // Falls back to service on cache miss.\n        const response = await this.client.fetch(request);\n        // Fetch throws for non-success responses, so success is guaranteed here.\n        const storageOperations = [\n            // Uses write-through cache for consistency with synchronous public API.\n            this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n        ];\n        if (response.status === 200) {\n            // Caches response only if it has changed, ie non-304 responses.\n            storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\n        }\n        await Promise.all(storageOperations);\n        return response;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nfunction getUserLanguage(navigatorLanguage = navigator) {\n    return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n        // Supported in most browsers, but returns the language of the browser\n        // UI, not the language set in browser settings.\n        navigatorLanguage.language\n    // Polyfill otherwise.\n    );\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nclass RestClient {\n    constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n        this.firebaseInstallations = firebaseInstallations;\n        this.sdkVersion = sdkVersion;\n        this.namespace = namespace;\n        this.projectId = projectId;\n        this.apiKey = apiKey;\n        this.appId = appId;\n    }\n    /**\n     * Fetches from the Remote Config REST API.\n     *\n     * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n     * connect to the network.\n     * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n     * fetch response.\n     * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n     */\n    async fetch(request) {\n        const [installationId, installationToken] = await Promise.all([\n            this.firebaseInstallations.getId(),\n            this.firebaseInstallations.getToken()\n        ]);\n        const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n            'https://firebaseremoteconfig.googleapis.com';\n        const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Content-Encoding': 'gzip',\n            // Deviates from pure decorator by not passing max-age header since we don't currently have\n            // service behavior using that header.\n            'If-None-Match': request.eTag || '*'\n        };\n        const requestBody = {\n            /* eslint-disable camelcase */\n            sdk_version: this.sdkVersion,\n            app_instance_id: installationId,\n            app_instance_id_token: installationToken,\n            app_id: this.appId,\n            language_code: getUserLanguage(),\n            custom_signals: request.customSignals\n            /* eslint-enable camelcase */\n        };\n        const options = {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(requestBody)\n        };\n        // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n        const fetchPromise = fetch(url, options);\n        const timeoutPromise = new Promise((_resolve, reject) => {\n            // Maps async event listener to Promise API.\n            request.signal.addEventListener(() => {\n                // Emulates https://heycam.github.io/webidl/#aborterror\n                const error = new Error('The operation was aborted.');\n                error.name = 'AbortError';\n                reject(error);\n            });\n        });\n        let response;\n        try {\n            await Promise.race([fetchPromise, timeoutPromise]);\n            response = await fetchPromise;\n        }\n        catch (originalError) {\n            let errorCode = \"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */;\n            if ((originalError === null || originalError === void 0 ? void 0 : originalError.name) === 'AbortError') {\n                errorCode = \"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */;\n            }\n            throw ERROR_FACTORY.create(errorCode, {\n                originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n            });\n        }\n        let status = response.status;\n        // Normalizes nullable header to optional.\n        const responseEtag = response.headers.get('ETag') || undefined;\n        let config;\n        let state;\n        // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n        // Requesting application/json and checking for a 200 ensures there's JSON data.\n        if (response.status === 200) {\n            let responseBody;\n            try {\n                responseBody = await response.json();\n            }\n            catch (originalError) {\n                throw ERROR_FACTORY.create(\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */, {\n                    originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n                });\n            }\n            config = responseBody['entries'];\n            state = responseBody['state'];\n        }\n        // Normalizes based on legacy state.\n        if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n            status = 500;\n        }\n        else if (state === 'NO_CHANGE') {\n            status = 304;\n        }\n        else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n            // These cases can be fixed remotely, so normalize to safe value.\n            config = {};\n        }\n        // Normalize to exception-based control flow for non-success cases.\n        // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n        // differentiating success states (200 from 304; the state body param is undefined in a\n        // standard 304).\n        if (status !== 304 && status !== 200) {\n            throw ERROR_FACTORY.create(\"fetch-status\" /* ErrorCode.FETCH_STATUS */, {\n                httpStatus: status\n            });\n        }\n        return { status, eTag: responseEtag, config };\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n    return new Promise((resolve, reject) => {\n        // Derives backoff from given end time, normalizing negative numbers to zero.\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n        const timeout = setTimeout(resolve, backoffMillis);\n        // Adds listener, rather than sets onabort, because signal is a shared object.\n        signal.addEventListener(() => {\n            clearTimeout(timeout);\n            // If the request completes before this timeout, the rejection has no effect.\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */, {\n                throttleEndTimeMillis\n            }));\n        });\n    });\n}\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e) {\n    if (!(e instanceof FirebaseError) || !e.customData) {\n        return false;\n    }\n    // Uses string index defined by ErrorData, which FirebaseError implements.\n    const httpStatus = Number(e.customData['httpStatus']);\n    return (httpStatus === 429 ||\n        httpStatus === 500 ||\n        httpStatus === 503 ||\n        httpStatus === 504);\n}\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nclass RetryingClient {\n    constructor(client, storage) {\n        this.client = client;\n        this.storage = storage;\n    }\n    async fetch(request) {\n        const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n            backoffCount: 0,\n            throttleEndTimeMillis: Date.now()\n        };\n        return this.attemptFetch(request, throttleMetadata);\n    }\n    /**\n     * A recursive helper for attempting a fetch request repeatedly.\n     *\n     * @throws any non-retriable errors.\n     */\n    async attemptFetch(request, { throttleEndTimeMillis, backoffCount }) {\n        // Starts with a (potentially zero) timeout to support resumption from stored state.\n        // Ensures the throttle end time is honored if the last attempt timed out.\n        // Note the SDK will never make a request if the fetch timeout expires at this point.\n        await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n        try {\n            const response = await this.client.fetch(request);\n            // Note the SDK only clears throttle state if response is success or non-retriable.\n            await this.storage.deleteThrottleMetadata();\n            return response;\n        }\n        catch (e) {\n            if (!isRetriableError(e)) {\n                throw e;\n            }\n            // Increments backoff state.\n            const throttleMetadata = {\n                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\n                backoffCount: backoffCount + 1\n            };\n            // Persists state.\n            await this.storage.setThrottleMetadata(throttleMetadata);\n            return this.attemptFetch(request, throttleMetadata);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/compat/index.d.ts|interface documentation} for method descriptions.\n */\nclass RemoteConfig {\n    get fetchTimeMillis() {\n        return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n    }\n    get lastFetchStatus() {\n        return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n    }\n    constructor(\n    // Required by FirebaseServiceFactory interface.\n    app, \n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    _client, \n    /**\n     * @internal\n     */\n    _storageCache, \n    /**\n     * @internal\n     */\n    _storage, \n    /**\n     * @internal\n     */\n    _logger) {\n        this.app = app;\n        this._client = _client;\n        this._storageCache = _storageCache;\n        this._storage = _storage;\n        this._logger = _logger;\n        /**\n         * Tracks completion of initialization promise.\n         * @internal\n         */\n        this._isInitializationComplete = false;\n        this.settings = {\n            fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n            minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n        };\n        this.defaultConfig = {};\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event, errorCode) {\n    const originalError = event.target.error || undefined;\n    return ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError && (originalError === null || originalError === void 0 ? void 0 : originalError.message)\n    });\n}\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nconst APP_NAMESPACE_STORE = 'app_namespace_store';\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n// Visible for testing.\nfunction openDatabase() {\n    return new Promise((resolve, reject) => {\n        try {\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\n            request.onerror = event => {\n                reject(toFirebaseError(event, \"storage-open\" /* ErrorCode.STORAGE_OPEN */));\n            };\n            request.onsuccess = event => {\n                resolve(event.target.result);\n            };\n            request.onupgradeneeded = event => {\n                const db = event.target.result;\n                // We don't use 'break' in this switch statement, the fall-through\n                // behavior is what we want, because if there are multiple versions between\n                // the old version and the current version, we want ALL the migrations\n                // that correspond to those versions to run, not only the last one.\n                // eslint-disable-next-line default-case\n                switch (event.oldVersion) {\n                    case 0:\n                        db.createObjectStore(APP_NAMESPACE_STORE, {\n                            keyPath: 'compositeKey'\n                        });\n                }\n            };\n        }\n        catch (error) {\n            reject(ERROR_FACTORY.create(\"storage-open\" /* ErrorCode.STORAGE_OPEN */, {\n                originalErrorMessage: error === null || error === void 0 ? void 0 : error.message\n            }));\n        }\n    });\n}\n/**\n * Abstracts data persistence.\n */\nclass Storage {\n    getLastFetchStatus() {\n        return this.get('last_fetch_status');\n    }\n    setLastFetchStatus(status) {\n        return this.set('last_fetch_status', status);\n    }\n    // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n    // consider adding timestamp to all storage records and an optional max age arg to getters.\n    getLastSuccessfulFetchTimestampMillis() {\n        return this.get('last_successful_fetch_timestamp_millis');\n    }\n    setLastSuccessfulFetchTimestampMillis(timestamp) {\n        return this.set('last_successful_fetch_timestamp_millis', timestamp);\n    }\n    getLastSuccessfulFetchResponse() {\n        return this.get('last_successful_fetch_response');\n    }\n    setLastSuccessfulFetchResponse(response) {\n        return this.set('last_successful_fetch_response', response);\n    }\n    getActiveConfig() {\n        return this.get('active_config');\n    }\n    setActiveConfig(config) {\n        return this.set('active_config', config);\n    }\n    getActiveConfigEtag() {\n        return this.get('active_config_etag');\n    }\n    setActiveConfigEtag(etag) {\n        return this.set('active_config_etag', etag);\n    }\n    getThrottleMetadata() {\n        return this.get('throttle_metadata');\n    }\n    setThrottleMetadata(metadata) {\n        return this.set('throttle_metadata', metadata);\n    }\n    deleteThrottleMetadata() {\n        return this.delete('throttle_metadata');\n    }\n    getCustomSignals() {\n        return this.get('custom_signals');\n    }\n}\nclass IndexedDbStorage extends Storage {\n    /**\n     * @param appId enables storage segmentation by app (ID + name).\n     * @param appName enables storage segmentation by app (ID + name).\n     * @param namespace enables storage segmentation by namespace.\n     */\n    constructor(appId, appName, namespace, openDbPromise = openDatabase()) {\n        super();\n        this.appId = appId;\n        this.appName = appName;\n        this.namespace = namespace;\n        this.openDbPromise = openDbPromise;\n    }\n    async setCustomSignals(customSignals) {\n        const db = await this.openDbPromise;\n        const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n        const storedSignals = await this.getWithTransaction('custom_signals', transaction);\n        const updatedSignals = mergeCustomSignals(customSignals, storedSignals || {});\n        await this.setWithTransaction('custom_signals', updatedSignals, transaction);\n        return updatedSignals;\n    }\n    /**\n     * Gets a value from the database using the provided transaction.\n     *\n     * @param key The key of the value to get.\n     * @param transaction The transaction to use for the operation.\n     * @returns The value associated with the key, or undefined if no such value exists.\n     */\n    async getWithTransaction(key, transaction) {\n        return new Promise((resolve, reject) => {\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n            const compositeKey = this.createCompositeKey(key);\n            try {\n                const request = objectStore.get(compositeKey);\n                request.onerror = event => {\n                    reject(toFirebaseError(event, \"storage-get\" /* ErrorCode.STORAGE_GET */));\n                };\n                request.onsuccess = event => {\n                    const result = event.target.result;\n                    if (result) {\n                        resolve(result.value);\n                    }\n                    else {\n                        resolve(undefined);\n                    }\n                };\n            }\n            catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-get\" /* ErrorCode.STORAGE_GET */, {\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n                }));\n            }\n        });\n    }\n    /**\n     * Sets a value in the database using the provided transaction.\n     *\n     * @param key The key of the value to set.\n     * @param value The value to set.\n     * @param transaction The transaction to use for the operation.\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async setWithTransaction(key, value, transaction) {\n        return new Promise((resolve, reject) => {\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n            const compositeKey = this.createCompositeKey(key);\n            try {\n                const request = objectStore.put({\n                    compositeKey,\n                    value\n                });\n                request.onerror = (event) => {\n                    reject(toFirebaseError(event, \"storage-set\" /* ErrorCode.STORAGE_SET */));\n                };\n                request.onsuccess = () => {\n                    resolve();\n                };\n            }\n            catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-set\" /* ErrorCode.STORAGE_SET */, {\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n                }));\n            }\n        });\n    }\n    async get(key) {\n        const db = await this.openDbPromise;\n        const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n        return this.getWithTransaction(key, transaction);\n    }\n    async set(key, value) {\n        const db = await this.openDbPromise;\n        const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n        return this.setWithTransaction(key, value, transaction);\n    }\n    async delete(key) {\n        const db = await this.openDbPromise;\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n            const compositeKey = this.createCompositeKey(key);\n            try {\n                const request = objectStore.delete(compositeKey);\n                request.onerror = (event) => {\n                    reject(toFirebaseError(event, \"storage-delete\" /* ErrorCode.STORAGE_DELETE */));\n                };\n                request.onsuccess = () => {\n                    resolve();\n                };\n            }\n            catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-delete\" /* ErrorCode.STORAGE_DELETE */, {\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n                }));\n            }\n        });\n    }\n    // Facilitates composite key functionality (which is unsupported in IE).\n    createCompositeKey(key) {\n        return [this.appId, this.appName, this.namespace, key].join();\n    }\n}\nclass InMemoryStorage extends Storage {\n    constructor() {\n        super(...arguments);\n        this.storage = {};\n    }\n    async get(key) {\n        return Promise.resolve(this.storage[key]);\n    }\n    async set(key, value) {\n        this.storage[key] = value;\n        return Promise.resolve(undefined);\n    }\n    async delete(key) {\n        this.storage[key] = undefined;\n        return Promise.resolve();\n    }\n    async setCustomSignals(customSignals) {\n        const storedSignals = (this.storage['custom_signals'] ||\n            {});\n        this.storage['custom_signals'] = mergeCustomSignals(customSignals, storedSignals);\n        return Promise.resolve(this.storage['custom_signals']);\n    }\n}\nfunction mergeCustomSignals(customSignals, storedSignals) {\n    const combinedSignals = Object.assign(Object.assign({}, storedSignals), customSignals);\n    // Filter out key-value assignments with null values since they are signals being unset\n    const updatedSignals = Object.fromEntries(Object.entries(combinedSignals)\n        .filter(([_, v]) => v !== null)\n        .map(([k, v]) => {\n        // Stringify numbers to store a map of string keys and values which can be sent\n        // as-is in a fetch call.\n        if (typeof v === 'number') {\n            return [k, v.toString()];\n        }\n        return [k, v];\n    }));\n    // Throw an error if the number of custom signals to be stored exceeds the limit\n    if (Object.keys(updatedSignals).length > RC_CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS) {\n        throw ERROR_FACTORY.create(\"custom-signal-max-allowed-signals\" /* ErrorCode.CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS */, {\n            maxSignals: RC_CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS\n        });\n    }\n    return updatedSignals;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nclass StorageCache {\n    constructor(storage) {\n        this.storage = storage;\n    }\n    /**\n     * Memory-only getters\n     */\n    getLastFetchStatus() {\n        return this.lastFetchStatus;\n    }\n    getLastSuccessfulFetchTimestampMillis() {\n        return this.lastSuccessfulFetchTimestampMillis;\n    }\n    getActiveConfig() {\n        return this.activeConfig;\n    }\n    getCustomSignals() {\n        return this.customSignals;\n    }\n    /**\n     * Read-ahead getter\n     */\n    async loadFromStorage() {\n        const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n        const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n        const activeConfigPromise = this.storage.getActiveConfig();\n        const customSignalsPromise = this.storage.getCustomSignals();\n        // Note:\n        // 1. we consistently check for undefined to avoid clobbering defined values\n        //   in memory\n        // 2. we defer awaiting to improve readability, as opposed to destructuring\n        //   a Promise.all result, for example\n        const lastFetchStatus = await lastFetchStatusPromise;\n        if (lastFetchStatus) {\n            this.lastFetchStatus = lastFetchStatus;\n        }\n        const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n        if (lastSuccessfulFetchTimestampMillis) {\n            this.lastSuccessfulFetchTimestampMillis =\n                lastSuccessfulFetchTimestampMillis;\n        }\n        const activeConfig = await activeConfigPromise;\n        if (activeConfig) {\n            this.activeConfig = activeConfig;\n        }\n        const customSignals = await customSignalsPromise;\n        if (customSignals) {\n            this.customSignals = customSignals;\n        }\n    }\n    /**\n     * Write-through setters\n     */\n    setLastFetchStatus(status) {\n        this.lastFetchStatus = status;\n        return this.storage.setLastFetchStatus(status);\n    }\n    setLastSuccessfulFetchTimestampMillis(timestampMillis) {\n        this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n        return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n    }\n    setActiveConfig(activeConfig) {\n        this.activeConfig = activeConfig;\n        return this.storage.setActiveConfig(activeConfig);\n    }\n    async setCustomSignals(customSignals) {\n        this.customSignals = await this.storage.setCustomSignals(customSignals);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerRemoteConfig() {\n    _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n    registerVersion(name, version);\n    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n    registerVersion(name, version, 'esm2017');\n    function remoteConfigFactory(container, { options }) {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        // The following call will always succeed because rc has `import '@firebase/installations'`\n        const installations = container\n            .getProvider('installations-internal')\n            .getImmediate();\n        // Normalizes optional inputs.\n        const { projectId, apiKey, appId } = app.options;\n        if (!projectId) {\n            throw ERROR_FACTORY.create(\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */);\n        }\n        if (!apiKey) {\n            throw ERROR_FACTORY.create(\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */);\n        }\n        if (!appId) {\n            throw ERROR_FACTORY.create(\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */);\n        }\n        const namespace = (options === null || options === void 0 ? void 0 : options.templateId) || 'firebase';\n        const storage = isIndexedDBAvailable()\n            ? new IndexedDbStorage(appId, app.name, namespace)\n            : new InMemoryStorage();\n        const storageCache = new StorageCache(storage);\n        const logger = new Logger(name);\n        // Sets ERROR as the default log level.\n        // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n        logger.logLevel = LogLevel.ERROR;\n        const restClient = new RestClient(installations, \n        // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n        SDK_VERSION, namespace, projectId, apiKey, appId);\n        const retryingClient = new RetryingClient(restClient, storage);\n        const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\n        const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);\n        // Starts warming cache.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        ensureInitialized(remoteConfigInstance);\n        return remoteConfigInstance;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nasync function fetchAndActivate(remoteConfig) {\n    remoteConfig = getModularInstance(remoteConfig);\n    await fetchConfig(remoteConfig);\n    return activate(remoteConfig);\n}\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nasync function isSupported() {\n    if (!isIndexedDBAvailable()) {\n        return false;\n    }\n    try {\n        const isDBOpenable = await validateIndexedDBOpenable();\n        return isDBOpenable;\n    }\n    catch (error) {\n        return false;\n    }\n}\n\n/**\n * The Firebase Remote Config Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n/** register component and version */\nregisterRemoteConfig();\n\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setCustomSignals, setLogLevel };\n\n", "import { Observable } from 'rxjs';\nimport { ensureInitialized, getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'firebase/remote-config';\n\nfunction parameter$(_a) {\n    var remoteConfig = _a.remoteConfig, key = _a.key, getter = _a.getter;\n    return new Observable(function (subscriber) {\n        ensureInitialized(remoteConfig).then(function () {\n            // 'this' for the getter loses context in the next()\n            // call, so it needs to be bound.\n            var boundGetter = getter.bind(remoteConfig);\n            subscriber.next(boundGetter(remoteConfig, key));\n        });\n    });\n}\nfunction getValue(remoteConfig, key) {\n    var getter = getValue$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getString(remoteConfig, key) {\n    var getter = getString$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getNumber(remoteConfig, key) {\n    var getter = getNumber$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getBoolean(remoteConfig, key) {\n    var getter = getBoolean$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getAll(remoteConfig) {\n    var getter = getAll$1;\n    // No key is needed for getAll()\n    return parameter$({ remoteConfig: remoteConfig, key: '', getter: getter });\n}\n\nexport { getAll, getBoolean, getNumber, getString, getValue };\n\n", "import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, PLATFORM_ID, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { getAll as getAll$1, getBoolean as getBoolean$1, getNumber as getNumber$1, getString as getString$1, getValue as getValue$1 } from 'rxfire/remote-config';\nimport { activate as activate$1, ensureInitialized as ensureInitialized$1, fetchAndActivate as fetchAndActivate$1, fetchConfig as fetchConfig$1, getAll as getAll$2, getBoolean as getBoolean$2, getNumber as getNumber$2, getRemoteConfig as getRemoteConfig$1, getString as getString$2, getValue as getValue$2, isSupported as isSupported$1, setCustomSignals as setCustomSignals$1, setLogLevel as setLogLevel$1 } from 'firebase/remote-config';\nexport * from 'firebase/remote-config';\nclass RemoteConfig {\n  constructor(remoteConfig) {\n    return remoteConfig;\n  }\n}\nconst REMOTE_CONFIG_PROVIDER_NAME = 'remote-config';\nclass RemoteConfigInstances {\n  constructor() {\n    return _getAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME);\n  }\n}\nconst remoteConfigInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME))), distinct());\nconst PROVIDED_REMOTE_CONFIG_INSTANCES = new InjectionToken('angularfire2.remote-config-instances');\nfunction defaultRemoteConfigInstanceFactory(provided, defaultApp, platformId) {\n  if (isPlatformServer(platformId)) {\n    return null;\n  }\n  const defaultRemoteConfig = _getDefaultInstanceOf(REMOTE_CONFIG_PROVIDER_NAME, provided, defaultApp);\n  return defaultRemoteConfig && new RemoteConfig(defaultRemoteConfig);\n}\nfunction remoteConfigInstanceFactory(fn) {\n  return (zone, injector, platformId) => {\n    if (isPlatformServer(platformId)) {\n      return null;\n    }\n    const remoteConfig = zone.runOutsideAngular(() => fn(injector));\n    return new RemoteConfig(remoteConfig);\n  };\n}\nconst REMOTE_CONFIG_INSTANCES_PROVIDER = {\n  provide: RemoteConfigInstances,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES]]\n};\nconst DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER = {\n  provide: RemoteConfig,\n  useFactory: defaultRemoteConfigInstanceFactory,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES], FirebaseApp, PLATFORM_ID]\n};\nclass RemoteConfigModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'rc');\n  }\n  static ɵfac = function RemoteConfigModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RemoteConfigModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RemoteConfigModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RemoteConfigModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideRemoteConfig(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'rc');\n  return makeEnvironmentProviders([DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n    provide: PROVIDED_REMOTE_CONFIG_INSTANCES,\n    useFactory: remoteConfigInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, PLATFORM_ID, _AngularFireSchedulers, FirebaseApps, ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getAllChanges = _zoneWrap(getAll$1, true);\nconst getBooleanChanges = _zoneWrap(getBoolean$1, true);\nconst getNumberChanges = _zoneWrap(getNumber$1, true);\nconst getStringChanges = _zoneWrap(getString$1, true);\nconst getValueChanges = _zoneWrap(getValue$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst activate = _zoneWrap(activate$1, true);\nconst ensureInitialized = _zoneWrap(ensureInitialized$1, true);\nconst fetchAndActivate = _zoneWrap(fetchAndActivate$1, true);\nconst fetchConfig = _zoneWrap(fetchConfig$1, true);\nconst getAll = _zoneWrap(getAll$2, true);\nconst getBoolean = _zoneWrap(getBoolean$2, true);\nconst getNumber = _zoneWrap(getNumber$2, true);\nconst getRemoteConfig = _zoneWrap(getRemoteConfig$1, true);\nconst getString = _zoneWrap(getString$2, true);\nconst getValue = _zoneWrap(getValue$2, true);\nconst isSupported = _zoneWrap(isSupported$1, true);\nconst setCustomSignals = _zoneWrap(setCustomSignals$1, true);\nconst setLogLevel = _zoneWrap(setLogLevel$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RemoteConfig, RemoteConfigInstances, RemoteConfigModule, activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getAllChanges, getBoolean, getBooleanChanges, getNumber, getNumberChanges, getRemoteConfig, getString, getStringChanges, getValue, getValueChanges, isSupported, provideRemoteConfig, remoteConfigInstance$, setCustomSignals, setLogLevel };\n"],
  "mappings": "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",
  "names": ["getValue", "getString", "getNumber", "getBoolean", "getAll", "RemoteConfig", "getAll", "getBoolean", "getNumber", "getString", "getValue", "activate", "ensureInitialized", "fetchAndActivate", "fetchConfig", "getRemoteConfig", "isSupported", "setCustomSignals", "setLogLevel"]
}
