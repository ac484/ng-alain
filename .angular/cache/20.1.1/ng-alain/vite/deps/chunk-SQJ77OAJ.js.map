{
  "version": 3,
  "sources": ["../../../../../../node_modules/@delon/util/fesm2022/date-time.mjs"],
  "sourcesContent": ["import { parse, addDays, startOfYear, endOfYear, subYears, startOfMonth, endOfMonth, subMonths, startOfWeek, endOfWeek, subWeeks, startOfDay, endOfDay, parseISO, formatDistanceToNow, format, differenceInCalendarDays, addSeconds } from 'date-fns';\n\n/**\n * Get the time range, return `[ Date, Date]` for the start and end dates\n *\n * 获取时间范围\n *\n * @param type 类型，带 `-` 表示过去一个时间，若指定 `number` 表示天数\n * @param time 开始时间\n * @param ignoreMaxTime 忽略追加结束日期的最大时间值\n */\nfunction getTimeDistance(type, time, options) {\n    time = time\n        ? typeof time === 'string'\n            ? parse(time, 'yyyy-MM-dd HH:mm:ss', new Date())\n            : new Date(time)\n        : new Date();\n    const opt = { weekStartsOn: 1 };\n    let res;\n    switch (type) {\n        case 'today':\n            res = [time, time];\n            break;\n        case '-today':\n            res = [addDays(time, -1), time];\n            break;\n        case 'yesterday':\n            res = [addDays(time, -1), addDays(time, -1)];\n            break;\n        case 'week':\n            res = [startOfWeek(time, opt), endOfWeek(time, opt)];\n            break;\n        case '-week':\n            res = [startOfWeek(subWeeks(time, 1), opt), endOfWeek(subWeeks(time, 1), opt)];\n            break;\n        case 'month':\n            res = [startOfMonth(time), endOfMonth(time)];\n            break;\n        case '-month':\n            res = [startOfMonth(subMonths(time, 1)), endOfMonth(subMonths(time, 1))];\n            break;\n        case 'year':\n            res = [startOfYear(time), endOfYear(time)];\n            break;\n        case '-year':\n            res = [startOfYear(subYears(time, 1)), endOfYear(subYears(time, 1))];\n            break;\n        default:\n            res = type > 0 ? [time, addDays(time, type)] : [addDays(time, type), time];\n            break;\n    }\n    return options?.ignoreMaxTime ? res : fixEndTimeOfRange(res);\n}\n/**\n * fix time is the most, big value\n */\nfunction fixEndTimeOfRange(dates) {\n    return [startOfDay(dates[0]), endOfDay(dates[1])];\n}\n/**\n * Convert to `Date` format\n *\n * @param value When is a number, it's treated as a timestamp; If it's seconds, you need to provide the `options.timestampSecond` parameter.\n */\nfunction toDate(value, options) {\n    const { formatString, defaultValue, timestampSecond } = {\n        formatString: 'yyyy-MM-dd HH:mm:ss',\n        defaultValue: new Date(NaN),\n        timestampSecond: false,\n        ...(typeof options === 'string' ? { formatString: options } : options)\n    };\n    if (value == null) {\n        return defaultValue;\n    }\n    if (value instanceof Date) {\n        return value;\n    }\n    if (typeof value === 'number' || (typeof value === 'string' && /^[0-9]+$/.test(value))) {\n        const valueNumber = +value;\n        return new Date(timestampSecond ? valueNumber * 1000 : valueNumber);\n    }\n    let tryDate = parseISO(value);\n    if (isNaN(tryDate)) {\n        tryDate = parse(value, formatString, new Date());\n    }\n    return isNaN(tryDate) ? defaultValue : tryDate;\n}\n/**\n * Format date, supports `Date, number, string` types\n *\n * @param value When is a number, it is treated as a timestamp (Support seconds and milliseconds timestamp).\n * @param formatString Please refer to [date-fnd format](https://date-fns.org/v2.30.0/docs/format) for string format\n * @param dateLocale Recommended to be consistent with NG-ZORRO by using `inject(NZ_DATE_LOCALE)`\n */\nfunction formatDate(value, formatString, options) {\n    value = toDate(value);\n    if (isNaN(value))\n        return '';\n    const langOpt = { locale: options?.locale };\n    return formatString === 'fn'\n        ? formatDistanceToNow(value, langOpt)\n        : (options?.customFormat ?? format)(value, formatString, langOpt);\n}\n\n// TODO: timezone process\nclass DateTimePickerUtil {\n    /**\n     * Current local time\n     *\n     * 当前本地时间\n     */\n    get now() {\n        return new Date();\n    }\n    /**\n     * Current local date (not including time part)\n     *\n     * 当前本地日期（不包含时间部分）\n     */\n    get date() {\n        return this.removeTime(this.now);\n    }\n    /**\n     * Remove the time part of the date\n     *\n     * 移除日期的时间部分\n     */\n    removeTime(d) {\n        return new Date(d.toDateString());\n    }\n    /**\n     * Format date-time\n     *\n     * 格式化日期\n     */\n    format(d, formatString = 'yyyy-MM-dd HH:mm:ss') {\n        return format(d, formatString);\n    }\n    genTick(count) {\n        return new Array(count).fill(0).map((_, idx) => idx);\n    }\n    /**\n     * Calculate the number of days between two dates, `0` means the same day\n     *\n     * 计算两个日期相差天数，`0` 表示同一天\n     */\n    getDiffDays(dateLeft, dateRight) {\n        return differenceInCalendarDays(dateLeft, typeof dateRight === 'number' ? addDays(this.date, dateRight) : dateRight || this.date);\n    }\n    /**\n     * Disabled Before date (Default: today), Generally serves `nzDisabledDate`\n     *\n     * 禁用之前日期（默认：今天），一般服务于 `nzDisabledDate`\n     */\n    disabledBeforeDate(options) {\n        return (d) => this.getDiffDays(d, options?.offsetDays) < 0;\n    }\n    /**\n     * Disabled After date (Default: today), Generally serves `nzDisabledDate`\n     *\n     * 禁用之后日期（默认：今天），一般服务于 `nzDisabledDate`\n     */\n    disabledAfterDate(options) {\n        return (d) => this.getDiffDays(d, options?.offsetDays) > 0;\n    }\n    baseDisabledTime(type, offsetSeconds) {\n        const tick24 = this.genTick(24);\n        const tick60 = this.genTick(60);\n        return (current) => {\n            const cur = current;\n            if (cur == null) {\n                return {};\n            }\n            const now = addSeconds(this.now, offsetSeconds || 0);\n            const nowHours = now.getHours();\n            const nowMinutes = now.getMinutes();\n            const curHours = cur.getHours();\n            const isToday = this.getDiffDays(this.removeTime(cur)) === 0;\n            return {\n                nzDisabledHours: () => {\n                    if (!isToday)\n                        return [];\n                    return type === 'before' ? tick24.slice(0, nowHours) : tick24.slice(nowHours + 1);\n                },\n                nzDisabledMinutes: () => {\n                    if (isToday && curHours === nowHours) {\n                        return type === 'before' ? tick60.slice(0, nowMinutes) : tick60.slice(nowMinutes + 1);\n                    }\n                    return [];\n                },\n                nzDisabledSeconds: () => {\n                    if (isToday && curHours === nowHours && cur.getMinutes() === nowMinutes) {\n                        const nowSeconds = now.getSeconds();\n                        return type === 'before' ? tick60.slice(0, nowSeconds) : tick60.slice(nowSeconds + 1);\n                    }\n                    return [];\n                }\n            };\n        };\n    }\n    /**\n     * Disabled Before time (Default: now), Generally serves `nzDisabledTime`\n     *\n     * 禁用之前时间（默认：现在），一般服务于 `nzDisabledTime`\n     */\n    disabledBeforeTime(options) {\n        return this.baseDisabledTime('before', options?.offsetSeconds);\n    }\n    /**\n     * Disabled After time (Default: now), Generally serves `nzDisabledTime`\n     *\n     * 禁用之后时间（默认：现在），一般服务于 `nzDisabledTime`\n     */\n    disabledAfterTime(options) {\n        return this.baseDisabledTime('after', options?.offsetSeconds);\n    }\n}\nconst dateTimePickerUtil = new DateTimePickerUtil();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DateTimePickerUtil, dateTimePickerUtil, fixEndTimeOfRange, formatDate, getTimeDistance, toDate };\n\n"],
  "mappings": "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",
  "names": []
}
