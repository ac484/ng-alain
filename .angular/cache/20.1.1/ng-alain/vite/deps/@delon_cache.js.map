{
  "version": 3,
  "sources": ["../../../../../../node_modules/@delon/cache/fesm2022/cache.mjs"],
  "sourcesContent": ["import { Platform } from '@angular/cdk/platform';\nimport { HttpClient, HttpContextToken, HttpResponseBase } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injectable } from '@angular/core';\nimport { Observable, tap, map, of, BehaviorSubject } from 'rxjs';\nimport { addSeconds } from 'date-fns';\nimport { AlainConfigService } from '@delon/util/config';\nimport { deepGet } from '@delon/util/other';\nconst DC_STORE_STORAGE_TOKEN = new InjectionToken('DC_STORE_STORAGE_TOKEN', {\n  providedIn: 'root',\n  factory: () => new LocalStorageCacheService()\n});\nclass LocalStorageCacheService {\n  platform = inject(Platform);\n  get(key) {\n    if (!this.platform.isBrowser) {\n      return null;\n    }\n    return JSON.parse(localStorage.getItem(key) || 'null') || null;\n  }\n  set(key, value) {\n    if (!this.platform.isBrowser) {\n      return true;\n    }\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  }\n  remove(key) {\n    if (!this.platform.isBrowser) {\n      return;\n    }\n    localStorage.removeItem(key);\n  }\n}\nclass CacheService {\n  store = inject(DC_STORE_STORAGE_TOKEN);\n  http = inject(HttpClient);\n  platform = inject(Platform);\n  memory = new Map();\n  notifyBuffer = new Map();\n  meta = new Set();\n  freqTick = 3000;\n  freqTime;\n  cog = inject(AlainConfigService).merge('cache', {\n    mode: 'promise',\n    reName: '',\n    prefix: '',\n    meta_key: '__cache_meta'\n  });\n  constructor() {\n    if (!this.platform.isBrowser) return;\n    this.loadMeta();\n    this.startExpireNotify();\n  }\n  // #region meta\n  pushMeta(key) {\n    if (this.meta.has(key)) return;\n    this.meta.add(key);\n    this.saveMeta();\n  }\n  removeMeta(key) {\n    if (!this.meta.has(key)) return;\n    this.meta.delete(key);\n    this.saveMeta();\n  }\n  loadMeta() {\n    const ret = this.store.get(this.cog.meta_key);\n    if (ret && ret.v) {\n      ret.v.forEach(key => this.meta.add(key));\n    }\n  }\n  saveMeta() {\n    const metaData = [];\n    this.meta.forEach(key => metaData.push(key));\n    this.store.set(this.cog.meta_key, {\n      v: metaData,\n      e: 0\n    });\n  }\n  getMeta() {\n    return this.meta;\n  }\n  /**\n   * 缓存对象\n   */\n  set(key, data, options = {}) {\n    if (!this.platform.isBrowser) return;\n    let e = 0;\n    const {\n      type,\n      expire\n    } = this.cog;\n    options = {\n      type,\n      expire,\n      ...options\n    };\n    if (options.expire) {\n      e = addSeconds(new Date(), options.expire).valueOf();\n    }\n    const emitNotify = options.emitNotify !== false;\n    if (!(data instanceof Observable)) {\n      this.save(options.type, key, {\n        v: data,\n        e\n      }, emitNotify);\n      return;\n    }\n    return data.pipe(tap(v => {\n      this.save(options.type, key, {\n        v,\n        e\n      }, emitNotify);\n    }));\n  }\n  save(type, key, value, emitNotify = true) {\n    if (type === 'm') {\n      this.memory.set(key, value);\n    } else {\n      this.store.set(this.cog.prefix + key, value);\n      this.pushMeta(key);\n    }\n    if (emitNotify) {\n      this.runNotify(key, 'set');\n    }\n  }\n  get(key, options = {}) {\n    if (!this.platform.isBrowser) return null;\n    const isPromise = options.mode !== 'none' && this.cog.mode === 'promise';\n    const value = this.memory.has(key) ? this.memory.get(key) : this.store.get(this.cog.prefix + key);\n    if (!value || value.e && value.e > 0 && value.e < new Date().valueOf()) {\n      if (isPromise) {\n        return (this.cog.request ? this.cog.request(key) : this.http.get(key)).pipe(map(ret => deepGet(ret, this.cog.reName, ret)), tap(v => this.set(key, v, {\n          type: options.type,\n          expire: options.expire,\n          emitNotify: options.emitNotify\n        })));\n      }\n      return null;\n    }\n    return isPromise ? of(value.v) : value.v;\n  }\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n  getNone(key) {\n    return this.get(key, {\n      mode: 'none'\n    });\n  }\n  /**\n   * 获取缓存，若不存在则设置缓存对象\n   */\n  tryGet(key, data, options = {}) {\n    if (!this.platform.isBrowser) return null;\n    const ret = this.getNone(key);\n    if (ret === null) {\n      if (!(data instanceof Observable)) {\n        this.set(key, data, options);\n        return data;\n      }\n      return this.set(key, data, options);\n    }\n    return of(ret);\n  }\n  // #endregion\n  // #region has\n  /** 是否缓存 `key` */\n  has(key) {\n    return this.memory.has(key) || this.meta.has(key);\n  }\n  // #endregion\n  // #region remove\n  _remove(key, needNotify) {\n    if (needNotify) this.runNotify(key, 'remove');\n    if (this.memory.has(key)) {\n      this.memory.delete(key);\n      return;\n    }\n    this.store.remove(this.cog.prefix + key);\n    this.removeMeta(key);\n  }\n  /** 移除缓存 */\n  remove(key) {\n    if (!this.platform.isBrowser) return;\n    this._remove(key, true);\n  }\n  /** 清空所有缓存 */\n  clear() {\n    if (!this.platform.isBrowser) return;\n    this.notifyBuffer.forEach((_v, k) => this.runNotify(k, 'remove'));\n    this.memory.clear();\n    this.meta.forEach(key => this.store.remove(this.cog.prefix + key));\n  }\n  // #endregion\n  // #region notify\n  /**\n   * 设置监听频率，单位：毫秒且最低 `20ms`，默认：`3000ms`\n   */\n  set freq(value) {\n    this.freqTick = Math.max(20, value);\n    this.abortExpireNotify();\n    this.startExpireNotify();\n  }\n  startExpireNotify() {\n    this.checkExpireNotify();\n    this.runExpireNotify();\n  }\n  runExpireNotify() {\n    this.freqTime = setTimeout(() => {\n      this.checkExpireNotify();\n      this.runExpireNotify();\n    }, this.freqTick);\n  }\n  checkExpireNotify() {\n    const removed = [];\n    this.notifyBuffer.forEach((_v, key) => {\n      if (this.has(key) && this.getNone(key) === null) removed.push(key);\n    });\n    removed.forEach(key => {\n      this.runNotify(key, 'expire');\n      this._remove(key, false);\n    });\n  }\n  abortExpireNotify() {\n    clearTimeout(this.freqTime);\n  }\n  runNotify(key, type) {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key).next({\n      type,\n      value: this.getNone(key)\n    });\n  }\n  /**\n   * `key` 监听，当 `key` 变更、过期、移除时通知，注意以下若干细节：\n   *\n   * - 调用后除再次调用 `cancelNotify` 否则永远不过期\n   * - 监听器每 `freq` (默认：3秒) 执行一次过期检查\n   */\n  notify(key) {\n    if (!this.notifyBuffer.has(key)) {\n      const change$ = new BehaviorSubject(this.getNone(key));\n      this.notifyBuffer.set(key, change$);\n    }\n    return this.notifyBuffer.get(key).asObservable();\n  }\n  /**\n   * 取消 `key` 监听\n   */\n  cancelNotify(key) {\n    if (!this.notifyBuffer.has(key)) return;\n    this.notifyBuffer.get(key).unsubscribe();\n    this.notifyBuffer.delete(key);\n  }\n  /** `key` 是否已经监听 */\n  hasNotify(key) {\n    return this.notifyBuffer.has(key);\n  }\n  /** 清空所有 `key` 的监听 */\n  clearNotify() {\n    this.notifyBuffer.forEach(v => v.unsubscribe());\n    this.notifyBuffer.clear();\n  }\n  // #endregion\n  ngOnDestroy() {\n    this.memory.clear();\n    this.abortExpireNotify();\n    this.clearNotify();\n  }\n  static ɵfac = function CacheService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CacheService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CacheService,\n    factory: CacheService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Cache options (Don't forget to register `CacheInterceptor`)\n *\n * 缓存配置项（不要忘记注册 `CacheInterceptor`）\n *\n * @example\n * this.http.get(`my`, {\n *  context: new HttpContext().set(CACHE, { key: 'user-data' })\n * })\n */\nconst CACHE = new HttpContextToken(() => ({}));\n\n/**\n * Cache interceptor\n *\n * 缓存拦截器\n *\n * @example\n * provideHttpClient(withInterceptors([httpCacheInterceptor])),\n */\nconst httpCacheInterceptor = (req, next) => {\n  const cog = inject(AlainConfigService).merge('cache', {}).interceptor;\n  const options = {\n    enabled: true,\n    emitNotify: true,\n    saveType: 'm',\n    ...cog,\n    ...req.context.get(CACHE)\n  };\n  const srv = inject(CacheService);\n  const mapPipe = map(ev => save(srv, ev, options));\n  if (options.enabled === false) {\n    return next(req).pipe(mapPipe);\n  }\n  if (options.key == null) {\n    options.key = req.urlWithParams;\n  }\n  const cacheData = srv.getNone(options.key);\n  if (cacheData != null) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.log(`%c👽${req.method}->${req.urlWithParams}->from cache(onle in development)`, 'background:#000;color:#1890ff', req, cacheData);\n    }\n    return of(cacheData);\n  }\n  return next(req).pipe(mapPipe);\n};\nfunction save(srv, ev, options) {\n  if (!(ev instanceof HttpResponseBase) || !(ev.status >= 200 && ev.status < 300)) return ev;\n  let expire = options.expire;\n  if (expire == null) {\n    const ageMatch = /max-age=(\\d+)/g.exec(ev.headers.get('cache-control')?.toLowerCase() ?? '');\n    if (ageMatch == null) return ev;\n    expire = +ageMatch[1];\n  }\n  if (expire > 0) {\n    srv.set(options.key, ev, {\n      type: options.saveType,\n      expire: expire\n    });\n  }\n  return ev;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CACHE, CacheService, httpCacheInterceptor };\n"],
  "mappings": "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",
  "names": []
}
