{
  "version": 3,
  "sources": ["../../../../../../node_modules/@delon/abc/fesm2022/lodop.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { inject, Injectable, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { AlainConfigService } from '@delon/util/config';\nimport { LazyService } from '@delon/util/other';\nclass LodopService {\n  scriptSrv = inject(LazyService);\n  cogSrv = inject(AlainConfigService);\n  defaultConfig;\n  _cog;\n  pending = false;\n  _lodop = null;\n  _init = new Subject();\n  _events = new Subject();\n  printBuffer = [];\n  constructor() {\n    this.defaultConfig = this.cogSrv.merge('lodop', {\n      url: 'http://localhost:8443/CLodopfuncs.js',\n      name: 'CLODOP',\n      companyName: '',\n      checkMaxCount: 100\n    });\n    this.cog = this.defaultConfig;\n  }\n  /**\n   * Get or set configuration, **Note:** Resetting will invert and reload script resources\n   *\n   * 获取或重新设置配置，**注：**重新设置会倒置重新加载脚本资源\n   */\n  get cog() {\n    return this._cog;\n  }\n  set cog(value) {\n    this._cog = {\n      ...this.defaultConfig,\n      ...value\n    };\n  }\n  /**\n   * Event change notification\n   *\n   * 事件变更通知\n   */\n  get events() {\n    return this._events.asObservable();\n  }\n  /**\n   * Get lodop object\n   *\n   * 获取 lodop 对象\n   */\n  get lodop() {\n    if (this._lodop) return of({\n      ok: true,\n      lodop: this._lodop\n    });\n    if (this.pending) return this._init.asObservable();\n    this.request();\n    return this._init.asObservable();\n  }\n  /**\n   * Get printer list\n   *\n   * 获取打印机列表\n   */\n  get printer() {\n    this.check();\n    const ret = [];\n    const count = this._lodop.GET_PRINTER_COUNT();\n    for (let index = 0; index < count; index++) {\n      ret.push(this._lodop.GET_PRINTER_NAME(index));\n    }\n    return ret;\n  }\n  check() {\n    if (!this._lodop) throw new Error(`请务必先调用 lodop 获取对象`);\n  }\n  request() {\n    this.pending = true;\n    const urlObj = new URL(this.cog.url);\n    urlObj.searchParams.set('name', this.cog.name);\n    const url = urlObj.toString();\n    let checkMaxCount = this.cog.checkMaxCount;\n    const onResolve = (status, error) => {\n      this._init.next({\n        ok: status === 'ok',\n        status,\n        error,\n        lodop: this._lodop\n      });\n    };\n    const checkStatus = () => {\n      --checkMaxCount;\n      if (this._lodop.webskt && this._lodop.webskt.readyState === 1) {\n        onResolve('ok');\n      } else {\n        if (checkMaxCount < 0) {\n          onResolve('check-limit');\n          return;\n        }\n        setTimeout(() => checkStatus(), 100);\n      }\n    };\n    this.scriptSrv.loadScript(url).then(res => {\n      if (res.status !== 'ok') {\n        this.pending = false;\n        onResolve('script-load-error', res[0]);\n        return;\n      }\n      const win = window;\n      if (Object.prototype.hasOwnProperty.call(win, this.cog.name)) {\n        this._lodop = win[this.cog.name];\n      }\n      if (this._lodop === null) {\n        onResolve('load-variable-name-error', {\n          name: this.cog.name\n        });\n        return;\n      }\n      this._lodop.SET_LICENSES(this.cog.companyName, this.cog.license, this.cog.licenseA, this.cog.licenseB);\n      checkStatus();\n    });\n  }\n  /**\n   * Reset lodop object\n   *\n   * 重置 lodop 对象\n   */\n  reset() {\n    this._lodop = null;\n    this.pending = false;\n    this.request();\n  }\n  /**\n   * Attach code to the `lodop` object, the string class supports dynamic parameters of `{{key}}`,\n   * **Note:** The code refers to the string data generated by the print design\n   *\n   * 附加代码至 `lodop` 对象上，字符串类支持 `{{key}}` 的动态参数，**注：** 代码是指打印设计所产生字符串数据\n   */\n  attachCode(code, contextObj, parser) {\n    this.check();\n    if (!parser) parser = /LODOP\\.([^(]+)\\(([^\\n]+)?\\);/i;\n    code.split('\\n').forEach(line => {\n      const res = parser.exec(line.trim());\n      if (!res) return;\n      const fn = this._lodop[res[1]];\n      if (fn) {\n        let arr = null;\n        try {\n          const fakeFn = new Function(`return [${res[2]}]`);\n          arr = fakeFn();\n        } catch {}\n        if (arr != null && Array.isArray(arr) && contextObj) {\n          for (let i = 0; i < arr.length; i++) {\n            if (typeof arr[i] === 'string') {\n              arr[i] = arr[i].replace(/{{(.*?)}}/g, (_match, key) => contextObj[key.trim()] || '');\n            }\n          }\n        }\n        fn.apply(this._lodop, arr);\n      }\n    });\n  }\n  /**\n   * The code is automatically returned after opening the print design and closing,\n   * **Note:** Automatically listen for the `On_Return` event, and it will be removed after running\n   *\n   * 打开打印设计关闭后自动返回代码，**注：** 自动监听 `On_Return` 事件，运行后会移除\n   */\n  design() {\n    this.check();\n    const tid = this._lodop.PRINT_DESIGN();\n    return new Promise(resolve => {\n      this._lodop.On_Return = (taskID, value) => {\n        if (tid !== taskID) return;\n        this._lodop.On_Return = null;\n        resolve(`${value}`);\n      };\n    });\n  }\n  printDo() {\n    const data = this.printBuffer.shift();\n    if (!data) return;\n    this.attachCode(data.code, data.item, data.parser);\n    const tid = this._lodop.PRINT();\n    this._lodop.On_Return = (taskID, value) => {\n      if (tid !== taskID) return;\n      this._lodop.On_Return = null;\n      this._events.next({\n        ok: value === true,\n        error: value === true ? null : value,\n        ...data\n      });\n      this.printDo();\n    };\n  }\n  /**\n   * Print immediately, generally used for batch printing\n   *\n   * 立即打印，一般用于批量套打\n   */\n  print(code, contextObj, parser) {\n    this.check();\n    if (contextObj) {\n      this.printBuffer.push(...(Array.isArray(contextObj) ? contextObj : [contextObj]).map(item => {\n        return {\n          code,\n          parser,\n          item\n        };\n      }));\n    }\n    this.printDo();\n  }\n  ngOnDestroy() {\n    this._init.unsubscribe();\n    this._events.unsubscribe();\n  }\n  static ɵfac = function LodopService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || LodopService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LodopService,\n    factory: LodopService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LodopService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nclass LodopModule {\n  static ɵfac = function LodopModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || LodopModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LodopModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LodopModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LodopModule, LodopService };\n"],
  "mappings": "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",
  "names": []
}
