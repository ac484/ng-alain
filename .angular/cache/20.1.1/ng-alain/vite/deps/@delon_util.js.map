{
  "version": 3,
  "sources": ["../../../../../../node_modules/@delon/util/fesm2022/form.mjs", "../../../../../../node_modules/@delon/util/fesm2022/math.mjs", "../../../../../../node_modules/@delon/util/fesm2022/pipe-currency.mjs", "../../../../../../node_modules/@delon/util/fesm2022/pipe-format.mjs", "../../../../../../node_modules/@delon/util/fesm2022/pipe-filter.mjs"],
  "sourcesContent": ["import { isNum, isInt, isDecimal, isIdCard, isMobile, isUrl, isIp, isColor, isChinese } from '@delon/util/format';\n\n/**\n * A set of validators for reactive forms\n *\n * 一套用于响应式表单的验证器\n */\nclass _Validators {\n    /**\n     * Wheter is number\n     *\n     * 是否为数字\n     */\n    static num(control) {\n        return isNum(control.value) ? null : { num: true };\n    }\n    /**\n     * Wheter is integer\n     *\n     * 是否为整数\n     */\n    static int(control) {\n        return isInt(control.value) ? null : { int: true };\n    }\n    /**\n     * Wheter is decimal\n     *\n     * 是否为小数点数值\n     */\n    static decimal(control) {\n        return isDecimal(control.value) ? null : { decimal: true };\n    }\n    /**\n     * Wheter is People's Republic of China identity card\n     *\n     * 是否为中华人民共和国居民身份证\n     */\n    static idCard(control) {\n        return isIdCard(control.value) ? null : { idCard: true };\n    }\n    /**\n     * Wheter is china mobile (China)\n     *\n     * 是否为手机号（中国）\n     */\n    static mobile(control) {\n        return isMobile(control.value) ? null : { mobile: true };\n    }\n    /**\n     * Wheter is url address\n     *\n     * 是否URL地址\n     */\n    static url(control) {\n        return isUrl(control.value) ? null : { url: true };\n    }\n    /**\n     * Wheter is IPv4 address (Support v4, v6)\n     *\n     * 是否IP4地址（支持v4、v6）\n     */\n    static ip(control) {\n        return isIp(control.value) ? null : { ip: true };\n    }\n    /**\n     * Wheter is color\n     *\n     * 是否颜色代码值\n     */\n    static color(control) {\n        return isColor(control.value) ? null : { color: true };\n    }\n    /**\n     * Wheter is chinese\n     *\n     * 是否中文\n     */\n    static chinese(control) {\n        return isChinese(control.value) ? null : { chinese: true };\n    }\n}\n\n/**\n * Match two control values\n *\n * 匹配两个控件值\n * ```ts\n * this.form = new FormGroup({\n *  pwd: new FormControl(''),\n *  repwd: new FormControl(''),\n * }, {\n *  validators: MatchControl('pwd', 'repwd'),\n * });\n * ```\n */\nfunction MatchControl(controlName, matchingControlName) {\n    return (formGroup) => {\n        const control = formGroup.get(controlName);\n        const matchingControl = formGroup.get(matchingControlName);\n        if (matchingControl.errors && !matchingControl.errors.matchControl) {\n            return null;\n        }\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ matchControl: true });\n        }\n        else {\n            matchingControl.setErrors(null);\n        }\n        return null;\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatchControl, _Validators };\n\n", "import { assertNumber } from '@delon/util/other';\n\n/**\n * Checks if `value` is between `start` and `end` to, but not including `end`. If `end` is not specified, it's set to start with `start` then set to `0`. If `start` is greater than `end` the params are swapped to support negative ranges.\n *\n * 检查 `value` 是否在 `start` 与 `end` 之间，但不包括 `end`。 如果 `end` 没有指定，那么 `start` 设置为 `0`。 如果 `start` 大于 `end`，那么参数会交换以便支持负范围。\n * ```ts\n * inRange(3, 2, 4); // true\n * inRange(4, 8); // true\n * inRange(4, 2); // false\n * inRange(2, 2); // false\n * inRange(1.2, 2); // true\n * inRange(-3, -2, -6); // true\n * ```\n */\nfunction inRange(value, start, end) {\n    if (end === undefined) {\n        end = start;\n        start = 0;\n    }\n    assertNumber(value);\n    assertNumber(start);\n    assertNumber(end);\n    return value >= Math.min(start, end) && value < Math.max(start, end);\n}\n\n/**\n * Computes `number` rounded up to `precision`.\n *\n * 根据 `precision`（精度） 向上舍入 `number`。\n * ```ts\n * ceil(4.006); // 5\n * ceil(6.004, 2); // 6.01\n * ceil(6040, -2); // 6100\n * ```\n */\nfunction ceil(number, precision = 0) {\n    return createRound(number, precision, 'ceil');\n}\n/**\n * Computes `number` rounded down to `precision`.\n *\n * 根据 `precision`（精度） 向下舍入 `number`。\n * ```ts\n * floor(4.006); // 4\n * floor(0.046, 2); // 0.04\n * floor(4060, -2); // 4000\n * ```\n */\nfunction floor(number, precision = 0) {\n    return createRound(number, precision, 'floor');\n}\n/**\n * Computes `number` rounded to `precision`.\n *\n * 根据 `precision`（精度） 四舍五入 `number`。\n * ```ts\n * round(4.006); // 4\n * round(4.006, 2); // 4.01\n * round(4060, -2); // 4100\n * ```\n */\nfunction round(number, precision = 0) {\n    return createRound(number, precision, 'round');\n}\nfunction createRound(number, precision, methodName) {\n    const func = Math[methodName];\n    precision = precision == null ? 0 : Math.min(precision, 292);\n    if (!precision) {\n        return func(number);\n    }\n    // Shift with exponential notation to avoid floating-point issues.\n    // See [MDN](https://mdn.io/round#Examples) for more details.\n    let pair = `${number}e`.split('e');\n    const value = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));\n    pair = `${value}e`.split('e');\n    return Number(`${pair[0]}e${Number(pair[1]) - precision}`);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ceil, floor, inRange, round };\n\n", "import * as i0 from '@angular/core';\nimport { inject, LOCALE_ID, Pipe, NgModule } from '@angular/core';\nimport { CurrencyService } from '@delon/util/format';\n\n/**\n * Large number format filter\n *\n * 大数据格式化\n */\nclass CurrencyMegaPipe {\n  srv = inject(CurrencyService);\n  isCN = inject(LOCALE_ID).startsWith('zh');\n  transform(value, options) {\n    const res = this.srv.mega(value, options);\n    return res.value + (this.isCN ? res.unitI18n : res.unit);\n  }\n  static ɵfac = function CurrencyMegaPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CurrencyMegaPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"mega\",\n    type: CurrencyMegaPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMegaPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mega'\n    }]\n  }], null, null);\n})();\n\n/**\n * Format a number with commas as thousands separators\n *\n * 格式化货币，用逗号将数字格式化为千位分隔符\n * ```ts\n * 10000 => `10,000`\n * 10000.567 => `10,000.57`\n * ```\n */\nclass CurrencyPricePipe {\n  srv = inject(CurrencyService);\n  transform(value, options) {\n    return this.srv.format(value, options);\n  }\n  static ɵfac = function CurrencyPricePipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CurrencyPricePipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"price\",\n    type: CurrencyPricePipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyPricePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'price'\n    }]\n  }], null, null);\n})();\n\n/**\n * Converted into RMB notation.\n *\n * 转化成人民币表示法\n */\nclass CurrencyCNYPipe {\n  srv = inject(CurrencyService);\n  transform(value, options) {\n    return this.srv.cny(value, options);\n  }\n  static ɵfac = function CurrencyCNYPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CurrencyCNYPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"cny\",\n    type: CurrencyCNYPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyCNYPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'cny'\n    }]\n  }], null, null);\n})();\nconst PIPES = [CurrencyMegaPipe, CurrencyPricePipe, CurrencyCNYPipe];\nclass CurrencyPipeModule {\n  static ɵfac = function CurrencyPipeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CurrencyPipeModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CurrencyPipeModule,\n    imports: [CurrencyMegaPipe, CurrencyPricePipe, CurrencyCNYPipe],\n    exports: [CurrencyMegaPipe, CurrencyPricePipe, CurrencyCNYPipe]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyPipeModule, [{\n    type: NgModule,\n    args: [{\n      imports: PIPES,\n      exports: PIPES\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CurrencyCNYPipe, CurrencyMegaPipe, CurrencyPipeModule, CurrencyPricePipe };\n", "import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { formatMask } from '@delon/util/format';\n\n/**\n * Format mask\n *\n * 格式化掩码\n *\n * | 字符 | 描述 |\n * | --- | --- |\n * | `0` | 任意数字，若该位置字符不符合，则默认为 `0` 填充 |\n * | `9` | 任意数字 |\n * | `#` | 任意字符 |\n * | `U` | 转换大写 |\n * | `L` | 转换小写 |\n * | `*` | 转换为 `*` 字符 |\n *\n * ```ts\n * formatMask('123', '(###)') => (123)\n * formatMask('15900000000', '999****9999') => 159****0000\n * ```\n */\nclass FormatMaskPipe {\n  transform(value, mask) {\n    return formatMask(value, mask);\n  }\n  static ɵfac = function FormatMaskPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FormatMaskPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"mask\",\n    type: FormatMaskPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormatMaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask'\n    }]\n  }], null, null);\n})();\nconst PIPES = [FormatMaskPipe];\nclass FormatPipeModule {\n  static ɵfac = function FormatPipeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FormatPipeModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FormatPipeModule,\n    imports: [FormatMaskPipe],\n    exports: [FormatMaskPipe]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormatPipeModule, [{\n    type: NgModule,\n    args: [{\n      imports: PIPES,\n      exports: PIPES\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormatMaskPipe, FormatPipeModule };\n", "import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\n\n/**\n * Filter array\n *\n * 过滤数组\n */\n// eslint-disable-next-line @angular-eslint/no-pipe-impure\nclass FilterPipe {\n  transform(array, matcher, ...args) {\n    return array.filter(i => matcher(i, ...args));\n  }\n  static ɵfac = function FilterPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FilterPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"filter\",\n    type: FilterPipe,\n    pure: false\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FilterPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'filter',\n      pure: false\n    }]\n  }], null, null);\n})();\nconst PIPES = [FilterPipe];\nclass FilterPipeModule {\n  static ɵfac = function FilterPipeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FilterPipeModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FilterPipeModule,\n    imports: [FilterPipe],\n    exports: [FilterPipe]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FilterPipeModule, [{\n    type: NgModule,\n    args: [{\n      imports: PIPES,\n      exports: PIPES\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FilterPipe, FilterPipeModule };\n"],
  "mappings": "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",
  "names": ["PIPES", "PIPES"]
}
